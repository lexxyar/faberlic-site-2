%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: BW_FasionGirl_2017_Silhouette_2.eps
%%Creator: Adobe Illustrator(R) 21.0
%%For: sophik
%%CreationDate: 7/12/2017
%%BoundingBox: 0 0 1200 1200
%%HiResBoundingBox: 0 0 1200 1200
%%CropBox: 0 0 1200 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 21.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 21.0.0 x223 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 12839 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDC4FFA8A8A8FD7BFF7D27F8F82752FD23FF7DA8FD
%37FFA8FD1BFFA827FD07F82727A8FD1AFF7D522752F8F8F82752FD31FFA8
%5227F827F8277DFD17FFA827FD0BF8FD19FFA8FD09F827FD2FFF7DFD08F8
%27FD16FF27FD0CF8A8FD18FFA8FD0AF852FD2EFFFD0AF87DFD14FF52FD0C
%F827FD1AFF27FD0AF8A8FD2CFF7DFD0AF852FD13FF52FD0DF852FD1AFFFD
%0BF87DFD2CFF7DFD0AF827FD12FF7DFD0EF852FD19FFA827FD0AF852FD2C
%FF52FD0BF8A8FD10FF7DFD0FF87DFD18FF7D52FD0BF87DFD2CFF52FD0BF8
%A8FD0FFF7D2727FD0EF852FD19FF27FD0BF87DFD2BFF7DFD0CF87DFD0DFF
%A87D5227FD0FF87DFD19FF52FD0BF8FD2DFF52FD0BF8A8FD0CFFA87D527D
%27FD0FF852FD19FF27FD0AF8277DFD2CFF27FD0BF852FD0CFF7D527D27FD
%10F87DFD19FF52FD0DF82752A8FD28FF52FD0BF827FD0BFFA87DA8FD11F8
%27FD1AFF7DFD0EF852FD29FF52FD0CF8A8FD09FFA87DA8FD12F87DFD1BFF
%FD0DF87D7DA8FD29FFFD0CF827FD09FF7DA827F8F827FD0EF852FD1CFF7D
%FD0BF8275227FD2AFF52F827FD0AF87DFD09FF2752FD0FF87D7DFD1EFF7D
%27FD0BF87DFD2CFF52FD0AF852FD08FF7D7DA8FD09F82727FD04F8A8FD05
%FFA8FD1AFF52FD09F852A8FD26FF2727277DFFFFFF52FD0BF8FD08FF52A8
%52FD07F8277DFFFD05F8A8FFFFFF7DF8F8F8277DFD16FF52FD04F852FF7D
%A8A8FD28FF27FD04F8277DFF27FD0BF87DFD07FFA852F827FD05F852A8FF
%7DFD05F827FFA827FD05F827FD0EFFFD047DA8FFFF52FD05F8FD2CFF7DFD
%14F852FD07FFA8F87DFD15F827F8F8F87DFD0CFF27FD06F827FD05F827A8
%FD2BFF7DFD14F827FD07FF277DA827F8F85227FD11F852F8F8F8FD0CFF27
%FD0DF8277D7DA8FD28FF27FD14F827A8FD05FFA852FF7DF8F8277DFD12F8
%527DF8F852FD0AFFA8FD12F852FD27FF52FD14F827FD07FFA8FF52F8F8A8
%52FD12F827FF7DF827FD0AFFA827FD12F8A8FD26FF27FD14F827FD08FF7D
%F8F827FF52FD13F8FF7DF8F8FD0BFFFD13F87DFD26FF27FD14F852FD08FF
%52F82752FF27FD13F87D52F827FD0BFF27FD12F87DFD26FFFD15F827FD07
%FFA8F8522752FF27FD13F827F8F8F8FD0BFF27FD12F87DFD26FF27FD15F8
%7DFD06FF7D277D5252FF52FD16F827FD0BFF52FD12F8A8FD08FFA8A8FD1C
%FFFD17F8FD06FF7D27FF5252FF52FD17F8FD0BFF27FD12F8FD07FFA827F8
%F852FD1AFFA8FD17F852FD05FF7D27FFA8F8FF7DFD16F827FD0BFF52FD11
%F827FD06FF52FD05F87DFD19FFA8FD18F87DFD05FF27A8FF277D7DF8F8F8
%2727FD12F8FD0BFF27FD12F87DFFFFFFA827FD07F87DFD18FFA8FD18F827
%FD06FF52FF7D527DF8F8F8277DFD11F827FD0BFF52FD12F852FFFF7DF8F8
%F8275227FD04F87DFD17FFA8FD12F82752FD05F852FD05FFA87DA8277DF8
%F8F827A827FD09F82727FD06F8FD0BFF27FD12F87DA852F8F8F827A8A8F8
%27F8F8F82752FD16FF7DF8F8F82752FD0AF827A8F852FF7DFD05F8A8FD06
%FFA8527DF8F8F827FF7DFD09F8277DFD05F827FD0BFF52F8F8F85227FD0D
%F82727F8F8F827A8FF525227F8F852FF7DA8FD15FF7DF8F8F8527DFD0AF8
%FFFF5227FFFF7DFD05F8A8FD06FF7DA8F8F8F852FFFF27FD08F85252FD06
%F8FD0BFF52F8F8F87D7DFD11F827A8FFA85252F8F8F827FD18FF52F8F8F8
%7DFFFD09F8A8FFFFA827A8FFFF7DFD04F827FD08FF27F8F852FFFFA8FD08
%F827A8FD05F827FD0BFF7DF8F8F8A8A8FD10F827FD06FFF8527D7DFD17FF
%A827F8F8F8FFFF27FD08F8A8FFFFFFA87DA8FFFF7DFD04F827FD07FFF8F8
%F87DFFFFFF27FD07F827A8FD05F852FD0BFF27F8F8F8A8FFFD10F8A8FD05
%FF5227FFFF7DA8FD16FFA8F8F8F827FFFF52FD07F827FD0AFFA8FD04F852
%FD06FF27F8F87DFFFFFF7DFD08F8A827FD04F8A8FD0BFF27F8F8F8FFFF7D
%FD0DF827A8FD06FF5252FFFFA8A8FD16FF52FD04F8FFFFA8FD07F827A8FD
%0AFF52FD04F87DFD05FF27F8F87DFD04FFFD08F8527DF8F8F827FD0BFFA8
%F8F8F827A8FFA8FD0CF827A8FD07FF27A8FFFF7DA8FD16FF7DF8F8F827FF
%FFA827FD06F827FD0AFF7DFD05F8A8FD05FF52F8F87DFD04FF27FD07F827
%A827F8F87DFD0BFF27F8F8F852FFFFFF52FD07F87D52F87DFD08FFA852FF
%FFFFA87DFD16FF52F8F8F827FFFFA8FD08F8A8FD08FF7DFD05F852FD06FF
%52F8F87DFFFFFFA8FD09F8A8A82752FD0BFF52FD04F8FD04FF7DFD06F827
%FD0CFFA852FFFFFFA852FD16FF7DF8F8F852FFFF52FD08F8A8FD07FF52FD
%05F87DFD07FF52F8F827FFFFFF27FD09F852FD0DFFA8FD04F8A8FD04FF52
%FD06F8A8FD0CFFA8A8FD04FF27FD16FF7DF8F8F827FF7DFD0AF8277DFD04
%FF52FD05F852FD08FFFD04F8A8FF52FD0AF827FD0DFF52F8F8F852FD04FF
%A8FD07F827FD0AFFA8527DA8FD04FF277DFD16FFF8F8F87DFF27FD0BF827
%FFFFA827FD05F87DFD08FFA827F8F8F8A8A8FD0CF8FD0CFFA8F8F8F827FD
%05FF52FD08F87DFD09FF2727F82752FFFFFF527DFD16FF27F8F87D7DFD0D
%F85252FD05F827FD0AFFA8FD04F82727FD0CF8A8FD0BFF52F8F8F8A8FD04
%FFA8FD0AF852FD07FFA8F85252F8F8F852FF7D52FD16FF27F8F852FD13F8
%277DFD0BFF7DFD12F8FD0BFFA827F8F852FD05FF27FD0BF87DFD06FFA8F8
%FFA87D2727F8272752FD16FF52FD15F87DA8FD0CFFA8FD12F8A8FD0AFF52
%F8F827FD05FF7DFD0CF827FD06FF7D27A8FFFFFF7DA827F8F8277DFD14FF
%7DFD12F82752FD0FFFA8FD12F8FD0BFFF8F8F8A8FD05FF52FD0DF8A8FD05
%FF7D27FD07FF5227277DFD14FFA8FD11F87DFD12FFFD12F8A8FD09FF52F8
%F87DFD06FFFD0EF87DFD05FF2752FD07FFA8527D7DFD14FFA827FD10F827
%FD12FF52FD11F8FD0AFF27F852FD06FF7DFD0EF87DFD05FF2752FD07FF52
%A87DA8FD15FFFD12F8A8FD11FF52FD10F827A8FD08FFA8F8F87DFFA8FD04
%FF7DFD0EF827FD05FFF87DFD07FF7D7DA8A8FD15FF52FD11F8A8FD11FF7D
%FD10F827FD09FFA8F8F827A8FD05FF7DFD0EF852FD04FFA8F8A8FD07FF7D
%A87DFD16FF27FD11F87DFD11FF7DFD10F852FD09FFA8FD04F8A8FD04FFA8
%FD0FF8FD04FF7DF8FD07FFA87D7D7DA8FD15FF27F827FD0FF87DFD11FFA8
%FD10F852FD0AFF27F8F8F827A8FFFFFFA827FD0DF827FD04FF5227FD08FF
%52A87DFD15FF7DF8F82727FD0EF87DFD11FFA8F8F82727FD0CF87DFD0AFF
%7DF8F8522727FD04FF27FD0EF8FD04FF2727FD07FF7D527D7DA8FD14FF27
%F8F87D52FD0EF8A8FD12FF27F8527DFD0CF87DFD0BFFF8F8F85252A8FFFF
%FF7DFD0DF827FD04FFF87DFD07FF7D527D7DFD15FF27F8F852FFFD0EF8A8
%FD12FF27F852A8FD0CF8A8FD0AFFA8FD04F85252FFFFFF7DFD0DF827FFFF
%FFA8F87DFD07FF5252527DA8FD14FF27F8F87DFF52FD0DF8FD13FF52F852
%FF27FD0AF827A8FD0AFFA8F8272727A8FD05FFFD0DF852FFFFFFA8F8A8FD
%07FF5252527DFD13FFA8A827F8F87DFF52FD0CF827FD13FF7DF852FF7DFD
%0BF8FD0BFF7DF827FF27A8FD05FF52FD0CF827FFFFFF52F8A8FD07FF2752
%27A8A8FD12FFA852F8F8F87DFFA8FD0CF852FD13FF7DF852FFA8FD0AF827
%FD0BFF7D2752FF527DFD05FFA8FD0CF852FFFFFF5227FD07FFA852277DA8
%FD14FF52F8F8F87DFFFF27FD0BF87DFD13FF52F852FFFFFD0BF8FD0BFF52
%52A8FF277DFD06FF27FD0BF852FFFFFF277DFD07FF7D2727527DFD14FF7D
%F852F87DFFFF52FD0BF8A8FD13FFF8F827FFFF52FD09F827FD0BFF5252FF
%FF527DFD06FFA8FD0BF87DFFFFFF277DFD07FF5252F8A87DFD14FF27FFA8
%F87DFFFFA8FD0BF8FD13FF7DF8F852FFFF52FD09F827FD0BFF277DFFFF27
%7DFD07FF27FD0AF87DFFFFA8F8FD08FF5227277D52A8FD12FFA852FFA8F8
%FD04FF52FD09F852FD13FF27F8F827FFFFA8FD09F827FD0BFF277DFFFF52
%52FD07FF7DFD0AF8A8FFFF7D52FD08FF5227F8A852FD13FF5252FF7DF8A8
%FFFFFF52FD09F87DFD12FFA8FD04F852FFA8FD09F827FD07FFA82752A8F8
%FFFFFF2752FD08FFFD0AF8A8FFFF7D7DFD08FF522727A852FD13FF27A8FF
%7DF8FD04FFA8FD09F8FD14FF7DF8F8F87DFFFF27FD08F827FD08FFF8F8F8
%277DA8FF2752FD08FF7DFD09F8FFFFFF52FD09FF272727A827FD12FF7D27
%FFFF5227A8FD04FF27FD07F827FD14FF7DF8F87DFFFFFF52FD09F8FD07FF
%A8F852FD06F852FD08FFA8FD08F827FFFFA8F8A8FD07FFA827F8527D27FD
%12FF527DFFFF7D27FD05FF27FD07F852FD14FF7D27F87DFFFFFF7DFD08F8
%27FD07FFA8F8FFA87D27FD04F852A8FD07FF52FD07F827FFFFFF527DFD07
%FFA827F87D7DF8FD11FF7D27FFFFFF5252FD05FF52FD07F87DFD14FF7DA8
%527DFFFFFFA8FD09F8FD07FF5227FD04FFA87D2727F8F8277DFD05FFA8FD
%07F827FD04FFA8A8A8FD05FF5227F8A82727FD0FFFA8A852FD04FF5252FD
%05FF7DFD07F87DFD14FF7DFFA87DFD04FFFD08F827A8FD06FF5227FD09FF
%52F8F8FD06FF52FD06F827FD06FFA8A8FD04FF52F8F8A827F8FD0FFF52F8
%277DFFFFFF277DFD05FF7DFD07F8A8FD13FFA87DFF7D52FD04FFFD09F8FD
%07FFF852FD09FFA8F852FD06FF52FD06F852FD08FF7DA8FFFFF827F8A8F8
%27A8FD0EFF27FD04F852522727A8FD04FF7DFD07F87DFD13FF7DA8FFA852
%FFFFFFA8FD08F827FD06FFA8F87DFD09FF7D2752FD06FFA8FD06F827FD09
%FF7DFF52F8F8277DF827FD0EFFA8FD09F827FD04FF7DFD07F8A8FD12FFA8
%7D7DFF7D52FFFFFF7DFD08F827FD06FF7DF8A8FD09FF7DF87DFD07FF52FD
%05F827FD0AFFA85227272752F852FD0EFFA8FD09F852FD04FF52FD07F8A8
%FD12FFA8A8A8FF7D52FFFFFF52FD08F827FD06FF52F8A8FD09FF52277DFD
%07FFA8FD06F8FD0DFF7DA87D7DA8FD0EFF52FD09F827FD04FF7DFD07F8FD
%13FFA8A87DFF7D52FFFFFF27FD08F827FD06FF27F8FD09FFA87D277DFD07
%FFA8FD06F8A8FD1FFF52FD09F852FFFFFF7DFD07F852FD11FFA852527DFF
%FFA827FFFFFFFD09F852FD06FFF852FD09FF7D7D52A8FD07FF7DFD05F827
%FD20FFFD0AF852FFFF7DFD08F852FD11FF27F8F827275227F852FF7DFD09
%F852FD05FFA8F852FD09FF525227A8FD07FF52FD05F852FD1FFF7DFD08F8
%27F852FFA8FD09F8A8FD11FF2727522727F82727F8527DFD09F8A8FD05FF
%A8F8A8FD09FF525227A8FD07FFFD06F852FD1FFF52FD08F827F852FFFD0A
%F8A8FD11FFF8A8FD05F827F852FD0AF8A8FD05FF52F8A8FD09FF2752F8FD
%07FF52FD06F852FD1FFF27FD08F852F87DA8FD0AF8FD11FFA827FF52FD04
%F852F82727FD08F827FD06FF5227FD0AFF275227FD07FF27FD06F852FD1E
%FFA827FD08F827F8527DFD09F827FD11FF7DF8FF7DFD04F852F827FD09F8
%7DFD06FFF852FD0AFFF85227FD06FF7DFD07F852FD21FFA8A85227F8F8F8
%27F87D27FD09F852FD11FF52F852A8F8F8F82727FD0BF8A8FD06FF27A8FD
%09FFA8272727FD06FFFD08F852FD24FFA8A852527D7D7DFD0AF8A8FD11FF
%52F8F8F82727F8F827F827FD09F8FD06FFA827FD0AFFA8F827F8FD05FF27
%FD08F852FD2AFFA8FD09F827FD12FF27F8F8527D52F827F827FD09F852FD
%06FF7D7DFD0AFF7D272752FD04FFA8FD09F852FD2AFF7DFD09F827FD11FF
%A8FD04F852F8F82727F827FD08F852FD06FF7D7DFD0AFF7DF82727FD04FF
%7DFD09F852FD2AFF52FD09F87DFD11FFA8FD04F82752F8FD0427FD08F8A8
%FD06FF52FD0BFF52272727FD04FF27FD09F827FD2AFF27FD09F87DFD11FF
%27FD04F82752F8F827F827FD08F8A8FD05FF7D7DFD0BFF52F82727FD04FF
%27FD09F827FD29FFA827F8F8F827FD05F8FD12FF272752F8F8F87D272727
%5227FD07F827FD06FFA8F8277DFD09FF27272752FD04FF27FD09F827FD29
%FFA8F8F8F852FD05F827FD11FFA8F8277D7D27F85252F8522752FD07F852
%FD07FFA8F8F827FD08FFF827F827FD04FF27FD09F852FD29FF7DF8F8527D
%FD05F852FD12FF52F8F8F85227527D27275227FD07F87DFD09FF27F827FD
%07FFF852F852FD04FF52FD09F827FD29FF27F8F8A87DFD05F87DFD14FFA8
%7D2727F8A827275252FD07F8FD0BFF52F8F8A8FD04FF7DF827F827FD04FF
%7DFD09F827FD28FF7DF8F827FF52FD05F8A8FD17FFA87D7DA8A8FFA827FD
%05F852FD0CFFA827F8FD04FF7DF852F852FD04FF7DFD09F827FD28FFF8F8
%F852FF52FD05F8FD1FFF52FD05F87DFD0EFF52F8A8FFFF7DF827F827FD04
%FFA8FD09F852FD27FF7DF8F8F852FF27FD04F852FD1FFFA8FD05F8FD10FF
%7DF8A8FF7DF827F852FD05FF27FD08F852FD27FF52F8F8F87DFF27FD04F8
%7DFD20FF27FD04F87DFD11FF52A852F8F8F852FD05FF27FD08F87DFD27FF
%FD04F87DFF27FD04F8FD21FF7DFD04F87DFD12FFA852525227A8FD05FF7D
%F8F8F827FD04F87DFD26FF7DFD04F8A8FF27F8F8F852FD21FF52FD04F852
%FD1DFF52F8F8F85227F8F8F8A8FD26FF7DF8F8F827FFFFFD04F87DFD20FF
%A8FD05F827FD1DFF7DF8F8F8A8FD04F8A8FD26FFFD04F852FFA8FD04F8FD
%21FF27FD06F8A8FD1CFF7DF8F8F8A827F8F8F8FD26FF7DFD04F8FFFFA8F8
%F8F87DFD20FF52FD07F87DFD1CFF7DF8F827FF27F8F852FD25FFA827F8F8
%F852FFFF7DF8F8F8A8FD1DFFA827FD09F852FD1CFF27F8F852FF27F8F852
%FD26FFFD04F852FFFF52F8F827FD1EFF27FD06F87D27F8F8F8FD1BFFA827
%F8F87DFFF8F8F87DFD26FF27F8F8F87DFFFFF8F8F8A8FD1DFFA8FD06F827
%FFFD04F87DFD1AFF52F8F8F8A8A8F8F8F8A8FD26FF52F8F8F8A8FF7DF8F8
%52FD1EFF7DFD06F87DFF7DF8F8F87DFD19FF7DFD04F8A8FFF8F8F8FD27FF
%A8F8F852FFFF27F8F87DFD1EFF52FD06F8A8FF52F8F8F827FD18FFA8FD05
%F8A87DF8F827FD28FF7DF8FFFF7DF8F827FD1EFFA8F852FD04F852FFFF27
%F8F8F827FD18FF7DFD05F87D52F8F852FD29FFA8FF7DF8F8F87DFD1EFF52
%FF7DFD04F8FFFF7DFD05F8A8FD17FF7DFD05F852F8F8F852FD2BFFFD04F8
%A8FD1DFF7DFFFF52F8F8F8A8FFFFFD06F87DFD17FF522727F8F827FD04F8
%52FD2AFF7DFD04F8FD1DFF527DFF7DF8F8F852FFFFFF27FD05F87DFD17FF
%277D7DFD07F852FD2AFF7DF8F8F827FD1FFFA8F8F8F827FD04FF7DFD05F8
%52FD17FF52FF52FD07F852FD2AFF7DF8F8F852FD1FFF27F8F8F87DFD05FF
%FD05F827FD16FF7D7DFF27F8F8F852F8F8F87DFD2AFF7DF8F8F87DFD1FFF
%52F8F8F8FD06FF7DA827F8F8F87DFD15FF7DA8FFF8F8F8277DF8F8F87DFD
%2AFF27F8F8F87DFD1FFF52F8F8F8A8FD05FF7DFFA8FD04F8A8FD14FF52FF
%7DF8F8F827FFF8F8F87DFD29FF7DFD04F8FD21FF27F8F8FD06FFA8A8FF52
%FD04F8FD16FF7DF8F8F827A827F8F852FD29FF52F8F8F827FD22FF27F8A8
%FD05FF7DA8FF7DFD05F8FD15FFA827F8F8F827F8F8F852FD29FF52F8F8F8
%27FD23FFA8FD06FF7D7DFFA827F827F8277DFD15FFA87D2727FD04F827FD
%29FFA8FD04F8A8FD2EFFA8A8FD1BFFA87DFD04F87DFD29FFA827F8F8A8FD
%4CFFA8FD04F827A8FD2AFFA8A8A8FD4DFF7D27F8F8F87DFD7DFFA8FDFCFF
%FD9DFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c137 79.159768, 2016/08/11-13:24:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Основные RGB</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 2017 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2017-07-12T15:05:23+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2017-07-12T15:05:23+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2017-07-12T15:05:23+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXlH5rf8AOSHkb8v7h9MP&#xA;PWdfT7em2jKBESKgXExqsZP8oDN/k0xV5lo3/OcNpJqCprPlV7ewZvintLsTSxr/AMY5Iolf/g1x&#xA;V7X5W/O/8q/NF7BYaN5ht5b+4A9GzlD28rs37CrMsfJ/8lanFWc4q7FXYq7FXYq7FUr8xeavLflq&#xA;w+v6/qVvploTxWW5kWMM1K8UBNWb2XfFWBa5/wA5MfkxpMMbnX0vml+zFYxyTsADSrUUKv8AsjXF&#xA;U48ifnX+W3nmf6poGro+oAE/o+4VoLggCpKJIB6lBueBNO+Ks5xV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;Vgf54eftQ8iflxqPmDTUhk1GNooLRZz8AknkCcuNQXKKS3EeHhXFXwF5l86+bfM9291r+r3WpSyE&#xA;sRPKzItTWiR/YRfZVAxVCaL5h13Q7xb3RtQuNOu0IKzWsrxNt4lCKj2OKvvn/nH38z7j8wvy/i1H&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:1eead598-9998-0941-824a-5f19eec4af83</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:1eead598-9998-0941-824a-5f19eec4af83</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:f75e72af-ebb6-c941-9cfc-04d045e5c80e</stRef:instanceID>
            <stRef:documentID>xmp.did:f75e72af-ebb6-c941-9cfc-04d045e5c80e</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f75e72af-ebb6-c941-9cfc-04d045e5c80e</stEvt:instanceID>
                  <stEvt:when>2017-07-12T15:04:48+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1eead598-9998-0941-824a-5f19eec4af83</stEvt:instanceID>
                  <stEvt:when>2017-07-12T15:05:23+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Белый</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Черный</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Оттенки серого</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1200 1200 li
1200 0 li
cp
clp
1200 1200 mo
0 1200 li
0 0 li
1200 0 li
1200 1200 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
453.173 761.302 mo
453.984 789.746 442.301 835.896 432.962 866.26 cv
426.702 886.614 428.285 883.781 448.654 888.175 cv
440.723 869.546 445.964 837.585 447.607 818.049 cv
449.314 797.755 455.821 777.726 453.173 761.302 cv
cp
0 0 0 rgb
f
701.094 268.155 mo
696.14 307.101 710.975 354.822 694.661 395.767 cv
693.635 352.583 686.328 306.084 701.094 268.155 cv
cp
f
451.11 270.115 mo
451.789 269.353 452.48 268.595 453.184 267.843 cv
452.444 268.839 451.727 269.85 451.021 270.867 cv
451.048 270.615 451.081 270.366 451.11 270.115 cv
cp
453.36 257.462 mo
457.182 241.86 468.452 228.393 480.969 217.68 cv
481.608 217.598 482.249 217.524 482.891 217.454 cv
469.981 229.354 459.514 242.014 458.821 253.573 cv
457.404 254.737 456.199 255.813 455.261 256.782 cv
454.487 257.583 453.715 258.406 452.945 259.241 cv
453.08 258.641 453.217 258.044 453.36 257.462 cv
cp
461.108 205.746 mo
465.713 200.687 470.066 195.239 474.639 190.151 cv
473.375 193.47 471.889 196.75 470.288 200.011 cv
467.254 201.667 464.174 203.589 461.108 205.746 cv
cp
456.653 209.056 mo
454.728 210.563 452.824 212.156 450.957 213.827 cv
453.77 208.618 457.287 203.696 460.788 199.214 cv
458.73 202.244 457.834 205.742 456.653 209.056 cv
cp
653.31 233.216 mo
653.885 233.312 654.606 233.618 655.435 234.087 cv
655.78 246.481 670.564 259.13 681.892 265.443 cv
682.081 271.748 678.575 286.578 673.777 299.878 cv
671.93 293.3 668.109 287.09 666.061 278.934 cv
665.333 276.032 664.928 272.317 664.607 268.231 cv
662.119 260.078 659.268 251.991 655.361 244.481 cv
655.618 243.553 656.031 242.892 656.63 242.554 cv
656.09 242.872 655.528 243.275 654.957 243.717 cv
653.029 240.099 650.844 236.624 648.326 233.345 cv
650.186 233.069 651.89 232.979 653.31 233.216 cv
cp
519.126 423.245 mo
515.419 389.295 526.349 354.839 524.554 321.12 cv
531.107 351.536 554.599 378.062 562.607 408.284 cv
564.206 414.32 564.074 419.927 562.806 425.262 cv
554.832 441.447 540.932 454.385 530.933 469.734 cv
528.932 453.541 520.899 439.49 519.126 423.245 cv
cp
502.069 223.045 mo
503.745 221.415 505.44 219.843 507.16 218.375 cv
508.712 217.05 510.265 215.742 511.812 214.441 cv
513.932 213.985 515.991 213.444 517.996 212.831 cv
517.69 213.055 517.384 213.278 517.076 213.501 cv
512.051 216.62 507.017 219.77 502.069 223.045 cv
cp
467.574 247.047 mo
472.517 239.58 478.252 233.331 484.629 227.766 cv
481.082 232.444 477.745 237.268 474.673 242.193 cv
472.149 243.888 469.768 245.511 467.574 247.047 cv
cp
699.017 259.91 mo
693.717 245.915 682.593 233.993 677.984 219.853 cv
667.462 218.436 654.303 212.529 644.273 215.51 cv
638.656 217.18 618.18 229.508 613.243 234.274 cv
611.526 234.513 609.861 234.628 608.281 234.529 cv
602.562 234.17 597.813 231.896 593.834 228.472 cv
591.177 218.342 590.294 208.414 592.032 197.884 cv
603.437 202.758 609.383 200.867 619.055 186.197 cv
624.064 178.599 630.51 168.819 632.523 159.891 cv
634.638 150.518 629.115 147.582 627.852 141.816 cv
631.962 140.85 636.205 139.116 640.085 137.393 cv
636.01 137.652 631.525 137.09 628.158 135.14 cv
629.268 130.952 631.691 127.613 632.6 122.75 cv
633.479 118.039 633.296 112.326 632.624 106.852 cv
636.56 91.8374 646.112 81.7764 626.196 70.7505 cv
619.478 67.0317 613.348 67.5835 606.481 67.6255 cv
603.63 65.8237 600.026 63.7739 596.776 61.9878 cv
595.11 60.9292 593.405 60.0054 591.699 59.2466 cv
590.679 58.7051 589.836 58.2632 589.26 57.9614 cv
589.348 58.0981 589.431 58.231 589.518 58.3672 cv
589.004 58.1802 588.49 57.9932 587.982 57.8389 cv
565.426 50.9639 545.561 61.6011 529.429 76.7241 cv
501.993 102.443 485.056 138.81 447.344 150.252 cv
459.663 146.948 470.941 142.503 482.191 135.392 cv
488.082 131.669 493.099 127.29 497.809 122.659 cv
495.101 127.854 491.911 132.801 486.946 137.23 cv
487.109 137.18 487.26 137.111 487.421 137.056 cv
481.662 141.825 474.844 146.464 467.71 149.629 cv
479.822 145.758 490.831 139.845 500.798 131.078 cv
503.016 129.127 505.551 126.82 508.204 124.327 cv
507.055 127.071 505.653 129.65 504.058 132.102 cv
498.601 136.843 493.329 140.877 488.275 143.643 cv
471.076 153.055 454.661 153.339 441.979 170.061 cv
440.298 172.278 438.926 174.667 437.691 177.127 cv
452.669 162.496 478.694 152.04 492.598 145.598 cv
487.817 150.233 482.656 154.574 477.755 159.003 cv
467.693 164.82 458.318 171.796 450.171 180.814 cv
440.278 191.764 419.909 217.599 425.868 233.19 cv
431.265 214.005 441.729 199.735 454.489 187.643 cv
449.897 196.738 447.659 206.29 446.754 217.787 cv
432.421 232 421.305 250.682 422.092 269.244 cv
427.936 252.665 441.459 237.327 455.834 227.18 cv
452.324 234.209 449.324 241.363 447.694 248.814 cv
446.422 254.631 446.231 260.582 446.686 266.534 cv
433.221 283.434 422.982 305.19 430.219 326.165 cv
432.405 332.5 437.279 337.87 442.991 342.879 cv
443.999 346.285 445.288 349.691 446.901 353.089 cv
446.501 350.28 445.809 347.445 444.979 344.587 cv
453.574 351.8 463.505 358.392 469.073 366.228 cv
463.818 358.197 454.895 351.794 448.661 345.287 cv
446.667 343.206 444.859 341.104 443.22 338.981 cv
442.373 336.431 441.487 333.862 440.646 331.275 cv
440.842 333.041 441.104 334.81 441.447 336.582 cv
429.753 319.94 429.076 301.989 441.819 282.202 cv
443.566 279.489 445.51 276.843 447.6 274.252 cv
447.678 274.741 447.767 275.228 447.851 275.716 cv
440.991 286.877 436.507 299.162 436.781 312.406 cv
436.913 318.796 438.636 325.086 440.646 331.275 cv
438.931 315.732 442.803 300.464 450.106 286.451 cv
450.689 288.862 451.3 291.25 451.917 293.6 cv
451.287 291.017 450.893 288.239 450.684 285.364 cv
453.602 279.921 457.032 274.674 460.848 269.68 cv
458.005 277.111 455.892 284.548 454.698 291.83 cv
449.711 322.23 472.2 341.388 471.957 371.383 cv
471.226 369.597 470.25 367.884 469.073 366.228 cv
470.233 368 471.219 369.851 471.953 371.801 cv
471.947 372.188 471.954 372.567 471.94 372.958 cv
472.024 372.776 472.088 372.605 472.169 372.426 cv
472.962 374.722 473.417 377.15 473.411 379.747 cv
473.564 377.064 473.139 374.556 472.276 372.177 cv
479.642 355.701 475.815 344.625 469.311 328.382 cv
461.653 309.262 460.888 293.012 468.65 273.427 cv
472.081 264.77 476.813 255.751 482.416 247.187 cv
489.907 240.869 497.822 235.424 505.654 231.091 cv
516.549 225.063 532.111 217.718 546.077 208.366 cv
546.082 218.491 543.618 228.548 538.168 236.194 cv
533.708 236.148 528.912 235.257 524.004 234.499 cv
519.91 232.975 515.697 232.372 511.314 233.475 cv
504.328 233.757 497.513 236.008 491.521 243.049 cv
475.207 262.219 481.419 292.366 482.89 315.278 cv
484.266 336.706 485.563 358.336 488.136 379.65 cv
489.293 389.241 489.269 402.667 491.047 414.663 cv
491.192 420.739 491.182 426.793 490.9 432.801 cv
490.282 445.979 486.182 458.596 485.211 471.611 cv
484.06 487.042 489.671 502.573 491.953 518.327 cv
495.882 545.459 499.646 572.703 502.731 599.834 cv
503.937 610.435 502.076 611.319 500.332 617.729 cv
498.966 622.751 496.726 624.202 496.3 629.338 cv
492.378 636.26 488.208 646.504 485.714 651.788 cv
490.194 654.654 493.351 658.357 496.065 662.425 cv
493.755 672.165 492.374 682.365 490.16 690.846 cv
489.631 692.869 489.076 694.902 488.521 696.935 cv
492.338 688.264 496.025 680.564 498.193 675.161 cv
498.701 673.896 499.258 672.619 499.842 671.333 cv
498.066 687.034 493.341 704.087 491.422 718.188 cv
489.541 731.999 486.177 747.08 485.473 761.493 cv
471.928 758.853 460.325 754.572 458.562 749.175 cv
462.909 762.455 li
469.011 766.313 477.543 769.047 485.445 770.816 cv
485.46 771.147 485.464 771.482 485.484 771.813 cv
485.52 771.491 485.564 771.171 485.6 770.85 cv
492.869 772.468 499.576 773.273 503.297 773.388 cv
504.728 773.432 506.083 773.435 507.403 773.415 cv
507.248 774.375 507.085 775.329 506.924 776.285 cv
501.958 776.137 497.303 775.882 494.207 775.766 cv
484.426 775.399 474.434 771.455 465.139 769.27 cv
481.032 817.832 li
491.973 822.42 502.796 827.42 512.851 833.584 cv
503.41 829.756 493.545 828.418 483.868 826.498 cv
507.069 897.389 li
507.069 900.082 507.069 902.775 507.069 905.469 cv
507.104 882.811 508.87 859.32 512.49 836.733 cv
514.944 821.418 513.693 786.117 526.797 776.155 cv
526.85 775.919 526.903 775.681 526.956 775.444 cv
522.442 776.456 514.766 776.501 507.599 776.302 cv
507.789 775.354 507.964 774.39 508.124 773.407 cv
515.784 773.23 521.762 771.982 528.233 769.763 cv
528.767 767.396 529.3 765.041 529.831 762.703 cv
525.678 764.216 518.025 764.693 509.233 764.311 cv
509.448 761.845 509.613 759.345 509.747 756.838 cv
509.441 759.328 509.118 761.813 508.774 764.291 cv
501.734 763.961 494.004 763.083 486.742 761.734 cv
489.005 744.951 492.1 728.215 494.573 711.475 cv
496.456 698.73 499.646 686.21 501.406 673.457 cv
501.486 672.874 501.554 672.281 501.613 671.684 cv
502.655 673.479 503.729 675.278 504.896 677.052 cv
505.068 682.496 505.931 687.607 508.416 690.02 cv
510.399 688.833 511.894 687.081 513.083 684.996 cv
513.148 686.124 513.213 687.257 513.276 688.394 cv
513.318 687.07 513.362 685.746 513.398 684.423 cv
514.719 681.917 515.623 678.964 516.322 675.839 cv
518.486 697.1 515.151 721.138 515.153 740.28 cv
515.154 747.636 515.85 755.337 514.31 762.445 cv
515.888 762.946 522.233 763.711 523.403 763.601 cv
520.801 755.662 521.097 699.063 517.902 669.795 cv
523.202 663.217 529.267 656.844 536.196 653.515 cv
532.572 650.224 528.394 649.356 524.489 651.69 cv
524.78 649.405 523.961 646.49 524.413 644.39 cv
523.794 645.308 523.159 646.178 522.515 647.013 cv
522.979 628.704 520.019 606.13 520.247 599.887 cv
520.926 581.344 522.643 563.117 524.603 544.944 cv
527.726 558.084 531.745 571.114 535.633 583.071 cv
538.188 590.931 541.184 600.922 544.795 610.875 cv
545.018 611.682 545.24 612.488 545.464 613.294 cv
548.92 632.534 553.033 651.68 557.222 670.656 cv
559.645 681.632 562.626 694.205 563.581 706.066 cv
561.499 722.06 557.804 738.165 553.866 754.334 cv
552.348 758.551 550.888 762.69 549.68 766.691 cv
539.682 799.807 533.377 836.221 539.071 870.477 cv
541.099 882.678 542.967 894.122 546.205 905.563 cv
544.714 907.301 545.736 907.828 546.918 907.999 cv
547.882 911.204 548.956 914.413 550.185 917.643 cv
552.948 924.895 555.945 935.458 559.965 945.102 cv
554.285 960.612 542.992 976.677 532.752 986.049 cv
529.385 984.703 525.706 984.685 522.295 985.685 cv
521.698 985.782 521.079 985.963 520.428 986.26 cv
520.009 986.45 519.614 986.664 519.233 986.892 cv
519.028 986.994 518.826 987.103 518.625 987.213 cv
519.195 986.316 li
518.064 987.138 517.044 988.011 516.071 988.906 cv
514.562 990.1 513.241 991.524 512.206 993.146 cv
506.437 1000.74 504.634 1010.14 504.463 1020.07 cv
496.904 1036.59 486.911 1054.08 472.14 1064.83 cv
472.92 1066.2 475.811 1069.67 477.46 1070.73 cv
480.169 1055.81 497.738 1036.4 513.964 1036.39 cv
514.35 1039.06 514.091 1041.98 512.785 1046.89 cv
510.376 1055.94 504.996 1061.48 500.017 1067.59 cv
497.261 1070.69 495.152 1073.83 493.643 1076.98 cv
493.606 1077.05 493.566 1077.12 493.53 1077.19 cv
491.81 1080.61 491.044 1083.21 490.988 1085.41 cv
488.933 1098.88 497.107 1111.95 511.769 1121.69 cv
511.894 1121.78 512.013 1121.85 512.136 1121.93 cv
515.86 1125.08 519.669 1127.19 523.003 1127.62 cv
523.06 1127.01 523.104 1126.38 523.156 1125.76 cv
523.781 1125.52 524.315 1125.12 524.756 1124.53 cv
525.08 1124.68 525.403 1124.84 525.728 1124.96 cv
525.803 1123.94 525.849 1122.93 525.878 1121.93 cv
526.348 1119.92 526.428 1117.12 526.096 1113.42 cv
525.901 1111.25 525.623 1109.07 525.299 1106.89 cv
524.59 1096.5 524.235 1086.79 530.587 1076.47 cv
538.751 1063.2 548.74 1051.28 556.553 1037.55 cv
565.026 1022.65 568.928 1006.59 575.584 991.142 cv
576.295 990.531 576.814 989.904 577.185 989.26 cv
578.555 993.292 579.891 997.341 581.171 1001.43 cv
584.583 1012.33 589.222 1022.84 585.587 1033.48 cv
585.26 1034.43 584.928 1035.35 584.595 1036.24 cv
577.532 1044.77 569.571 1052.87 574.373 1065.81 cv
575.275 1068.24 577.211 1070.65 579.666 1072.7 cv
581.397 1078.38 583.806 1084.22 584.918 1088.65 cv
588.172 1101.59 590.498 1118.75 586.699 1131.66 cv
588.258 1132.2 593.048 1133.1 594.516 1133.05 cv
589.135 1118.38 587.951 1098.99 592.232 1082.88 cv
598.949 1089.35 606.407 1095.25 610.879 1103.47 cv
615.185 1111.39 613.191 1125.74 620.217 1131.57 cv
628.251 1138.24 663.422 1133.97 672.295 1129.17 cv
662.393 1121.03 655.065 1110.74 647.167 1100.78 cv
643.716 1096.43 641.694 1096.07 639.148 1091.37 cv
634.168 1082.18 632.673 1066.29 630.521 1055.87 cv
624.433 1026.38 617.674 996.63 609.171 967.781 cv
605.093 953.945 602.74 939.209 600.31 924.574 cv
600.348 924.496 600.376 924.414 600.416 924.336 cv
600.432 919.554 601.362 915.172 603.497 911.464 cv
604.9 904.724 607.054 898.189 610.159 892.105 cv
613.73 875.812 618.144 859.638 622.244 843.516 cv
625.309 829.523 628.555 815.224 631.458 800.841 cv
634.481 791.364 637.322 781.834 639.822 772.198 cv
641.762 764.721 642.681 758.156 642.698 751.745 cv
645.564 734.296 645.831 716.199 645.851 699.563 cv
645.882 673.409 644.499 647.34 644.503 621.107 cv
644.504 618.113 644.617 615.103 644.791 612.084 cv
644.956 611.029 645.125 609.972 645.288 608.918 cv
645.443 605.081 645.68 601.244 645.969 597.408 cv
646.256 594.303 646.539 591.199 646.783 588.101 cv
649.275 562.614 653.813 537.158 655.861 511.853 cv
657.517 491.412 658.055 470.565 654.877 450.238 cv
651.879 431.053 643.134 413.625 637.996 395.025 cv
633.491 378.716 631.873 361.928 639.951 346.557 cv
640.568 345.384 641.226 344.235 641.899 343.096 cv
642.29 362.096 644.103 384.288 649.598 402.856 cv
651.941 410.777 663.158 430.314 674.076 429.902 cv
674.899 429.872 675.719 429.666 676.531 429.321 cv
677.438 429.089 678.332 428.691 679.2 428.089 cv
680.965 426.867 682.311 425.124 683.371 423.062 cv
692.011 411.107 698.809 386.899 699.777 378.636 cv
701.432 364.542 698.637 350.051 698.423 335.926 cv
700.479 323.348 702.077 310.729 702.489 298.024 cv
702.925 284.592 703.67 272.198 699.017 259.91 cv
cp
f
426.378 197.87 mo
431.7 191.988 434.111 184.258 437.691 177.127 cv
431.374 183.297 427.012 190.204 426.378 197.87 cv
cp
f
447.344 150.252 mo
444.463 151.025 441.526 151.736 438.519 152.404 cv
441.59 151.842 444.519 151.11 447.344 150.252 cv
cp
f
467.71 149.629 mo
462.217 151.385 456.498 152.722 450.544 153.713 cv
456.2 153.727 462.05 152.141 467.71 149.629 cv
cp
f
479.579 760.084 mo
475.708 755.588 474.431 749.281 474.808 742.05 cv
473.151 747.119 471.481 752.159 469.819 757.143 cv
473.082 757.896 476.717 759.422 479.579 760.084 cv
cp
f
488.521 696.935 mo
482.197 711.303 475.522 728.34 474.808 742.05 cv
479.684 727.135 484.43 711.938 488.521 696.935 cv
cp
f
457.428 808.273 mo
456.818 794.984 461.852 782.041 461.171 768.45 cv
462.478 768.677 463.801 768.955 465.139 769.27 cv
462.909 762.455 li
457.92 759.302 454.554 755.402 454.525 750.655 cv
454.344 780.257 446.505 806.96 443.186 836.111 cv
441.238 853.221 441.608 871.069 438.437 887.748 cv
462.405 887.908 482.212 903.856 504.221 905.3 cv
504.117 898.466 482.392 891.981 476.641 888.582 cv
465.852 882.206 456.775 879.778 445.144 875.821 cv
444.699 864.979 446.06 853.923 447.713 842.873 cv
447.151 852.04 446.919 861.248 446.618 869.038 cv
465.31 870.213 484.215 887.673 498.807 895.902 cv
489.559 878.553 490.638 853.045 481.373 837.019 cv
478.212 831.553 467.537 823.28 459.419 821.812 cv
458.407 820.236 455.319 817.595 451.601 815.177 cv
451.686 814.324 451.774 813.471 451.847 812.621 cv
461.625 821.25 472.62 824.267 483.868 826.498 cv
481.032 817.832 li
473.144 814.524 465.195 811.43 457.428 808.273 cv
cp
f
528.537 775.011 mo
527.927 775.339 527.354 775.732 526.797 776.155 cv
517.683 816.98 508.941 861.394 511.192 902.627 cv
516.365 902.367 522.318 900.151 525.75 901.323 cv
516.552 883.854 522.996 856.336 524.597 837.466 cv
525.472 827.146 527.191 816.684 528.933 806.221 cv
526.618 828.095 525.289 850.152 526.508 871.938 cv
527.698 893.205 526.789 894.03 540.646 903.862 cv
526.309 859.896 542.776 810.275 539.225 765.451 cv
537.369 766.235 535.62 766.959 533.93 767.633 cv
533.965 766.957 534.012 766.278 534.039 765.604 cv
533.943 766.303 533.848 767.004 533.752 767.703 cv
531.846 768.461 530.017 769.15 528.233 769.763 cv
527.807 771.649 527.381 773.541 526.956 775.444 cv
527.534 775.314 528.071 775.173 528.537 775.011 cv
cp
f
509.747 756.838 mo
511.734 740.645 512.941 724.226 513.691 708.258 cv
513.967 702.375 513.661 695.35 513.276 688.394 cv
512.815 703.006 512.044 717.618 510.881 732.107 cv
510.307 739.257 510.213 748.056 509.747 756.838 cv
cp
f
790.021 588.835 mo
793.909 583.799 800.085 579.622 804.704 575.564 cv
796.418 579.843 785.793 577.767 776.665 578.264 cv
779.517 583.864 785.855 586.635 791.4 589.207 cv
792.875 588.219 793.313 586.748 792.717 584.792 cv
790.021 588.835 li
cp
f
780.59 568.624 mo
785.222 572.224 791.886 574.365 795.407 579.204 cv
786.585 581.535 778.48 577.292 780.59 567.276 cv
780.59 568.624 li
cp
f
787.327 560.54 mo
792.537 599.69 793.052 643.808 788.815 683.04 cv
793.783 683.075 799.255 682.825 803.623 684.136 cv
799.603 651.662 800.171 618.631 796.454 586.349 cv
795.629 579.176 793.989 553.927 783.366 559.37 cv
783.612 562.139 785.133 563.945 787.327 560.54 cv
cp
f
759.032 590.182 mo
756.396 617.261 748.36 649.286 751.151 676.303 cv
752.973 676.435 758.697 676.519 760.176 676.399 cv
754.069 644.896 775.596 600.673 760.713 571.495 cv
754.896 591.729 756.607 613.859 753.643 634.646 cv
759.032 590.182 li
cp
f
1105.31 366.515 mo
1115.96 397.354 1115.22 433.261 1122.17 465.388 cv
1124.2 474.805 1123.68 482.628 1135.83 479.756 cv
1127.3 473.626 1129.18 462.784 1127.45 453.543 cv
1124.36 437.101 1119.94 420.879 1116.39 404.51 cv
1113.9 392.991 1115.15 364.275 1102.82 358.37 cv
1102.39 361.97 1102.32 365.583 1105.31 366.515 cv
cp
f
725.347 648.12 mo
719.746 651.091 721.993 660.528 721.396 667.448 cv
719.252 692.301 711.884 717.866 706.814 742.442 cv
698.352 783.474 694.708 829.451 680.99 868.947 cv
687.43 870.538 691.961 874.984 697.133 879.002 cv
711.697 890.313 727.058 900.064 741.577 911.469 cv
757.17 923.717 774.65 932.408 791.262 942.653 cv
770.596 925.448 751.607 905.787 731.364 887.974 cv
718.77 876.891 703.642 863.5 686.487 863.333 cv
695.931 832.698 707.919 804.101 714.677 772.363 cv
720.788 743.664 724.988 714.495 729.454 685.504 cv
731.99 669.037 735.624 658.397 722.559 646.949 cv
724.671 650.797 726.499 654.78 725.347 648.12 cv
cp
f
822.347 699.027 mo
822.746 699.302 823.122 699.58 823.454 699.865 cv
823.46 699.754 823.472 699.64 823.477 699.527 cv
822.347 699.027 li
cp
f
813.824 695.098 mo
813.363 694.939 812.896 694.784 812.423 694.632 cv
822.347 699.027 li
821.525 698.462 820.574 697.918 819.512 697.396 cv
817.647 696.655 815.704 695.862 813.824 695.098 cv
cp
f
791.479 935.776 mo
791.572 930.592 791.845 925.405 792.254 920.218 cv
791.337 925.506 790.795 930.891 791.479 935.776 cv
cp
f
811.707 890.486 mo
811.681 890.699 811.652 890.926 811.625 891.145 cv
812.129 881.125 812.261 872.693 812.559 869.198 cv
815.171 838.555 816.983 807.963 818.938 777.303 cv
819.464 769.049 819.07 758.723 819.035 748.129 cv
815.979 763.843 813.091 779.62 810.425 795.442 cv
811.596 777.116 815.457 758.659 819.094 740.347 cv
819.041 742.94 819.026 745.541 819.035 748.129 cv
821.928 733.257 824.961 718.442 828.083 703.699 cv
827.691 703.923 827.147 703.859 826.401 703.363 cv
826.165 703.758 825.945 704.169 825.723 704.579 cv
825.68 703.546 825.504 702.629 825.141 701.898 cv
824.79 701.192 824.211 700.516 823.454 699.865 cv
823.157 705.228 822.457 710.745 821.517 716.344 cv
821.04 718.452 820.649 720.643 820.333 722.897 cv
816.992 740.06 812.058 757.679 810.185 773.592 cv
807.1 799.812 804.773 826.036 801.963 852.229 cv
801.529 855.645 801.131 859.062 800.727 862.479 cv
797.205 881.719 793.77 900.972 792.254 920.218 cv
793.255 914.441 794.682 908.789 795.404 904.063 cv
796.737 895.346 797.92 886.622 799.008 877.894 cv
796.75 899.473 795.123 921.071 794.318 942.646 cv
794.127 942.786 793.939 942.938 793.742 943.068 cv
792.542 940.847 791.844 938.38 791.479 935.776 cv
791.42 939.133 791.428 942.488 791.524 945.843 cv
792.358 944.877 793.293 944.06 794.287 943.358 cv
794.273 943.742 794.25 944.126 794.236 944.51 cv
797.643 945.476 800.38 943.861 802.586 940.524 cv
805.964 940.34 809.427 941.16 812.461 942.938 cv
808.135 927.79 811.42 906.004 811.707 890.486 cv
cp
f
803.079 685.807 mo
788.297 676.573 769.876 673.302 754.821 664.223 cv
752.902 663.065 751.157 661.798 749.472 660.504 cv
766.192 668.143 783.908 673.993 800.255 682.322 cv
807.057 685.787 813.675 691.638 820.752 695.787 cv
813.998 698.055 808.891 689.437 803.079 685.807 cv
cp
735.472 660.554 mo
736.999 660.938 738.668 661.723 740.381 662.728 cv
735.472 660.554 li
cp
742.781 657.305 mo
739.635 656 736.569 654.401 733.619 652.378 cv
736.613 654.127 739.677 655.753 742.781 657.305 cv
cp
842.588 690.144 mo
825.483 690.23 808.909 676.029 793.383 669.561 cv
778.754 663.466 762.484 663.82 747.637 659.078 cv
744.544 656.632 741.567 654.188 738.082 652.282 cv
734.23 650.175 729.285 651.511 725.261 648.566 cv
726.556 653.424 728.187 658.596 729.329 663.277 cv
729.557 662.755 729.823 662.319 730.116 661.944 cv
739.024 677.346 773.224 685.124 786.792 688.499 cv
791.103 689.571 802.951 691.583 812.423 694.632 cv
809.889 693.51 li
811.129 694.003 812.458 694.541 813.824 695.098 cv
815.905 695.811 817.839 696.576 819.512 697.396 cv
820.915 697.954 822.269 698.48 823.517 698.941 cv
823.542 698.397 823.537 697.864 823.554 697.323 cv
826.093 698.602 828.702 699.59 831.404 700.129 cv
831.553 700.062 831.699 699.977 831.847 699.898 cv
831.816 699.991 831.786 700.092 831.756 700.188 cv
831.64 700.167 831.521 700.152 831.404 700.129 cv
830.835 700.39 830.261 700.57 829.679 700.641 cv
829.496 700.662 829.254 700.649 828.96 700.607 cv
828.957 700.311 828.944 700.008 828.924 699.704 cv
828.862 699.991 828.803 700.28 828.742 700.568 cv
827.571 700.361 825.718 699.756 823.517 698.941 cv
823.508 699.136 823.487 699.333 823.477 699.527 cv
828.493 701.749 li
828.355 702.398 828.22 703.05 828.083 703.699 cv
828.542 703.437 828.789 702.773 828.894 701.927 cv
829.097 702.016 li
829.861 701.805 830.634 701.631 831.406 701.452 cv
831.094 702.699 830.785 704.243 830.441 706.208 cv
827.222 724.6 828.695 744.75 826.502 763.423 cv
825.169 774.779 824.126 785.998 823.336 797.134 cv
818.731 845.809 814.993 894.69 812.772 943.112 cv
812.671 943.05 812.563 942.999 812.461 942.938 cv
812.645 943.585 812.822 944.239 813.035 944.86 cv
816.255 945.125 821.994 944.122 824.977 942.986 cv
823.156 927.075 822.379 911.063 822.285 894.986 cv
822.963 911.247 823.985 927.659 825.284 944.399 cv
825.731 944.365 828.477 944.295 828.897 944.36 cv
832.926 860.106 829.025 774.917 842.57 691.237 cv
841.227 692.26 841.7 691.762 842.579 690.685 cv
842.921 690.477 843.265 690.286 843.611 690.132 cv
843.413 690.14 843.216 690.135 843.018 690.139 cv
843.275 689.812 843.546 689.454 843.803 689.084 cv
843.38 689.463 842.979 689.811 842.588 690.144 cv
cp
f
923.149 1033.49 mo
922.663 1035.32 922.149 1037.07 921.63 1038.78 cv
921.221 1039.4 920.805 1040.03 920.367 1040.65 cv
917.209 1045.19 913.515 1048.96 911.255 1053.75 cv
911.645 1047.85 911.996 1041.94 912.259 1036.02 cv
911.785 1032.13 911.33 1028.22 911.033 1024.24 cv
909.698 1006.34 915.471 987.553 918.339 969.954 cv
920.26 958.17 922.357 946.402 924.511 934.641 cv
926.542 944.753 928.277 954.916 929.171 965.217 cv
931.105 987.539 928.893 1011.8 923.149 1033.49 cv
cp
919.73 1119.54 mo
919.664 1120.94 919.558 1122.32 919.433 1123.7 cv
914.377 1119.57 910.123 1115.02 908.195 1109.65 cv
908.048 1109.3 907.928 1108.92 907.833 1108.53 cv
907.192 1106.33 906.929 1104 907.16 1101.51 cv
907.406 1098.84 907.846 1096.2 908.38 1093.56 cv
908.94 1085.27 909.58 1076.98 910.197 1068.69 cv
914.775 1085.37 920.566 1101.99 919.73 1119.54 cv
cp
784.852 570.981 mo
785.331 571.06 785.811 571.13 786.29 571.212 cv
787.327 575.361 li
786.366 574.217 785.584 572.653 784.852 570.981 cv
cp
1140.45 625.938 mo
1141.79 578.729 1142.35 530.447 1148.26 483.911 cv
1120.51 476.113 1094.58 459.243 1067.44 449.033 cv
1071.76 427.688 1078.96 405.85 1084.44 386.461 cv
1084.77 385.295 1085.45 382.829 1086.27 379.816 cv
1086.76 379.928 1087.25 379.995 1087.75 380.019 cv
1087.87 380.422 1087.97 380.81 1088.06 381.159 cv
1094.62 377.586 1102.99 379.325 1106.99 376.268 cv
1112.8 371.829 1113.22 358.459 1113.21 349.548 cv
1120.22 353.818 1130.41 363.794 1137.55 357.452 cv
1121.62 349.004 1108.04 335.652 1096.66 321.327 cv
1091.22 314.48 1093.16 310.437 1082.48 308.545 cv
1077.67 307.695 1070.93 307.901 1067.35 310.797 cv
1045.55 321.719 1026.8 338.708 1005.64 351.727 cv
999.386 355.571 992.47 358.563 985.957 361.995 cv
988.595 354.982 990.032 347.703 989.648 340.02 cv
989.209 331.244 985.323 329.179 982.09 323.321 cv
986.085 300.867 994.51 271.224 978.67 256.776 cv
970.545 249.365 957.096 250.484 945.859 248.689 cv
941.982 246.032 937.96 242.644 934.802 239.105 cv
936.54 232.402 939.243 226.018 942.646 219.354 cv
943.621 217.445 944.806 215.493 946.102 213.504 cv
974.8 224.286 1022.11 210.353 1022.96 180.9 cv
1016.55 189.864 1005.15 194.087 994.89 190.124 cv
1003.17 185.207 1022.43 175.212 1019.46 166.253 cv
1021.13 164.735 1023.62 161.197 1024.4 160.488 cv
1017.58 162.444 1012.27 167.741 1004.22 166.918 cv
1006.06 165.562 1008.49 161.677 1011.2 160.167 cv
1006.05 160.01 989.053 160.267 984.555 154.665 cv
979.671 148.581 984.533 149.006 986.473 141.078 cv
989.585 128.361 990.104 118.017 986.464 105.326 cv
977.239 73.1728 942.469 53.1182 914.115 69.6768 cv
909.348 68.9287 904.706 68.4726 900.398 68.6177 cv
882.052 69.2368 871.103 85.206 885.647 95.873 cv
881.238 102.498 880.839 110.769 881.106 119.279 cv
881.236 123.424 881.168 126.01 880.809 128.246 cv
876.045 129.371 871.07 128.721 865.284 127.182 cv
868.894 133.056 873.672 135.2 878.762 135.033 cv
878.252 136.345 877.651 137.847 876.942 139.686 cv
873.004 149.899 874.083 157.8 877.642 165.795 cv
880.241 180.287 886.555 197.404 897.078 202.146 cv
899.485 203.23 902.234 203.718 905.132 203.727 cv
905.99 204.318 906.863 204.87 907.758 205.35 cv
901.434 214.917 889.421 228.398 877.479 236.457 cv
863.38 235.39 848.197 229.053 835.896 231.123 cv
822.802 229.56 810.22 231.541 807.524 245.305 cv
804.178 262.398 808.148 283.441 808.917 300.571 cv
809.896 322.427 807.738 344.563 809.094 366.333 cv
810.368 366.406 811.698 366.423 813.045 366.428 cv
813.598 367.908 813.746 369.624 813.288 371.538 cv
809.008 389.43 808.669 410.716 793.998 423.728 cv
791.428 428.033 789.094 432.35 787.113 436.02 cv
781.703 446.047 774.484 459.263 770.092 472 cv
757.239 495.242 744.029 521.726 750.981 543.835 cv
753.048 550.408 755.954 556.579 759.141 562.582 cv
760.525 578.938 768.591 605.051 777.622 612.98 cv
777.219 604.714 774.241 596.084 774.061 587.665 cv
778.81 588.783 784.711 589.476 789.888 588.562 cv
788.976 587.178 788.393 585.113 787.492 583.75 cv
796.881 579.714 807.787 579.405 816.867 574.318 cv
808.198 573.724 792.871 574.949 786.275 570.168 cv
782.853 562.807 778.324 552.969 780.887 549.416 cv
784.499 550.176 787.829 552.239 791.023 554.75 cv
793.253 559.921 799.664 568.088 805.484 568.5 cv
806.144 568.61 806.794 568.624 807.422 568.499 cv
807.032 567.931 806.529 567.285 805.939 566.576 cv
806.411 566.827 806.884 567.064 807.359 567.269 cv
802.914 553.158 785.84 538.404 775.485 528.011 cv
766.28 518.771 766.529 522.196 775.145 510.461 cv
790.183 489.979 803.325 468.152 817.962 447.404 cv
819.04 445.875 820.154 444.408 821.275 442.97 cv
823.91 440.667 825.756 438.178 826.177 436.789 cv
828.227 434.187 830.192 431.581 831.901 428.812 cv
831.915 428.359 831.937 427.907 831.954 427.454 cv
833.712 425.53 835.349 423.458 836.4 421.297 cv
836.946 420.621 837.487 419.883 838.018 419.06 cv
844.586 408.87 844.719 384.417 846.946 372.166 cv
848.334 364.53 849.473 356.667 850.843 348.849 cv
853.61 357.047 856.377 365.249 859.181 373.453 cv
863.263 385.4 868.141 401.631 876.235 414.288 cv
876.915 421.616 877.282 428.791 877.416 435.385 cv
860.504 465.207 838.758 494.315 841.212 528.558 cv
843.8 564.67 862.518 607.321 877.588 640.083 cv
886.226 658.861 895.295 677.484 902.8 696.578 cv
905.032 702.258 906.15 711.657 909.405 717.145 cv
909.387 719.747 909.252 722.323 908.715 724.801 cv
911.079 724.948 913.459 724.912 915.825 724.891 cv
917.01 738.198 917.306 750.992 912.953 766.013 cv
904.239 796.09 879.461 819.353 874.734 851.008 cv
867.663 898.37 902.909 956.303 880.795 1000.99 cv
876.033 1010.61 863.916 1017.95 861.406 1028.16 cv
860.783 1030.7 860.677 1032.92 860.941 1034.94 cv
856.324 1056.74 854.356 1081.79 846.348 1103.97 cv
847.883 1105.25 850.298 1106.69 852.151 1107.15 cv
850.987 1088.45 860.921 1067.72 870.998 1051.19 cv
871.958 1052.38 872.886 1053.62 873.724 1054.95 cv
885.511 1073.59 860.098 1106.9 873.025 1121.52 cv
873.557 1122.12 874.363 1122.7 875.379 1123.26 cv
877.53 1125.93 881.377 1127.59 888.662 1130.03 cv
898.667 1133.38 907.878 1135.67 917.744 1136.04 cv
917.113 1139.68 916.411 1143.31 915.73 1146.94 cv
915.824 1147.19 915.899 1147.45 916 1147.7 cv
921.72 1161.77 956.136 1166.22 969.938 1159.61 cv
968.742 1156.05 967.311 1152.53 965.815 1149 cv
963.261 1145.79 960.606 1142.66 957.712 1139.74 cv
957.083 1139.1 956.382 1138.49 955.668 1137.88 cv
953.935 1128.62 952.776 1115.51 949.906 1104.2 cv
949.816 1093.03 949.926 1081.83 950.9 1070.71 cv
951.277 1066.41 951.702 1062 952.451 1057.64 cv
951.595 1041.1 953.188 1024.99 956.837 1008.31 cv
969.362 951.032 974.796 897.888 971.091 839.862 cv
969.452 814.209 971.356 787.79 970.977 761.653 cv
972.576 756.945 973.814 752.122 974.12 746.993 cv
974.64 738.276 973.754 729.711 972.899 721.218 cv
971.312 705.43 971.312 689.671 971.828 673.912 cv
978.252 618.336 988.363 562.631 979.033 506.644 cv
975.353 484.563 971.284 472.158 954.815 459.165 cv
947.012 453.008 942.296 446.082 939.11 438.577 cv
940.792 433.652 942.406 428.728 943.999 423.809 cv
947.109 419.114 950.552 414.49 954.107 409.89 cv
962.258 421.333 966.325 426.512 981.999 415.122 cv
1002.36 400.328 1019.66 379.819 1038.01 362.372 cv
1045.16 355.574 1052.7 348.461 1060.58 342.571 cv
1061.45 341.92 1064.96 339.858 1067.91 337.988 cv
1068.06 338.757 1068.2 339.513 1068.27 340.241 cv
1069.6 353.254 1062.98 362.537 1061.05 374.427 cv
1072.37 371.898 1074.18 357.008 1078.33 347.79 cv
1078.66 348.026 1078.97 348.29 1079.27 348.575 cv
1079.64 352.715 1081.52 359.489 1083.49 366.011 cv
1083.35 365.96 1083.23 365.888 1083.09 365.841 cv
1075.62 363.258 1071.39 367.517 1077.16 371.349 cv
1077.52 372.633 1078.32 374.044 1079.42 375.35 cv
1074.26 387.439 1072.54 403.344 1070.91 412.987 cv
1068.92 424.763 1068.21 436.924 1067.33 448.992 cv
1062.88 447.319 1058.4 445.807 1053.87 444.564 cv
1055.56 445.294 1055.86 446.298 1056.81 447.358 cv
1054.08 446.749 1051.1 447.276 1048.02 444.702 cv
1051.88 451.091 1058.54 455.666 1065.63 459.194 cv
1065.5 460.011 1065.37 460.828 1065.25 461.642 cv
1062.11 460.639 1058.85 459.578 1055.19 457.977 cv
1054.86 457.833 1054.54 457.676 1054.23 457.51 cv
1054.19 457.271 1054.16 457.045 1054.11 456.79 cv
1053.35 456.561 1052.64 456.3 1051.93 456.042 cv
1050.65 455.1 1049.46 454.041 1048.26 453.015 cv
1047.71 451.372 1046.98 449.914 1046.03 448.706 cv
1045.53 449.15 1045.09 449.686 1044.68 450.284 cv
1043.83 449.76 1042.94 449.314 1041.97 448.995 cv
1042.36 450.147 1042.87 451.353 1043.46 452.556 cv
1039.64 461.418 1040.85 478.727 1039.13 487.003 cv
1031.9 521.941 1025.11 556.215 1019.36 591.475 cv
1014.6 620.641 1010.39 650.783 1002.01 678.916 cv
1010 678.924 1017.58 681.851 1024.92 686.205 cv
1022.67 684.205 1020.53 682.173 1018.56 680.101 cv
1003.52 664.283 1017.76 644.601 1022.82 624.903 cv
1033.62 582.859 1041.5 538.139 1046.49 495.02 cv
1047.59 485.559 1050.2 472.156 1049.69 461.575 cv
1052.46 464.286 1054.76 464.688 1054.5 459.887 cv
1057.67 462.641 1061.03 465.101 1064.55 467.31 cv
1064.08 471.614 1063.78 475.867 1063.72 480.031 cv
1064.49 476.063 1065.1 472.035 1065.6 467.966 cv
1077.05 474.929 1090.08 479.335 1103.3 482.678 cv
1094.87 477.495 1086.63 471.453 1081.08 468.197 cv
1075.62 464.988 1071.03 463.482 1066.26 461.961 cv
1066.33 461.182 1066.41 460.403 1066.48 459.622 cv
1070.82 461.721 1075.27 463.443 1079.32 464.954 cv
1095.95 471.17 1111.2 481.666 1128.03 488.091 cv
1119.95 486.46 1111.59 484.777 1103.3 482.678 cv
1111.27 487.582 1119.41 491.717 1125.59 491.988 cv
1120.67 503.229 1121.37 516.583 1119.56 528.66 cv
1115.54 555.464 1109.61 582.019 1105.18 608.769 cv
1099.16 645.173 1099.49 697.84 1077.37 729.06 cv
1084.1 728.678 1091.16 727.763 1095.6 732.898 cv
1095.47 713.502 1100.29 692.617 1103.37 673.297 cv
1109.37 635.639 1114.83 597.574 1119.33 559.653 cv
1121.98 537.322 1122.93 510.555 1132.89 489.819 cv
1135.68 490.727 1138.53 491.51 1141.43 492.122 cv
1143.79 521.404 1140.33 551.859 1139.29 581.313 cv
1138.11 614.791 1135.49 646.521 1130.27 679.813 cv
1127.3 698.757 1120.08 717.789 1118.63 736.854 cv
1123.97 735.043 1131.2 734.222 1137.42 734.177 cv
1147.35 701.917 1139.5 659.146 1140.45 625.938 cv
cp
f
1024.92 686.205 mo
1032.11 692.564 1040.56 698.571 1049.13 704.312 cv
1041.2 697.845 1033.21 691.116 1024.92 686.205 cv
cp
f
1049.13 704.312 mo
1057.91 711.475 1066.63 718.301 1075.6 721.926 cv
1067.6 716.291 1058.3 710.453 1049.13 704.312 cv
cp
f
1130.91 548.413 mo
1132.06 543.593 1132.52 538.638 1132.28 533.688 cv
1132.74 590.235 1123.59 649.668 1115.33 705.686 cv
1114.52 711.17 1115.02 742.567 1102.96 734.111 cv
1092.04 726.46 1108.18 672.913 1109.26 665.33 cv
1117.78 605.324 1131.77 546.744 1137.65 486.433 cv
1130.91 548.413 li
cp
f
391.829 408.123 mo
378.367 419.339 365.988 432.179 352.961 444.067 cv
340.373 455.555 330.037 460.786 316.344 468.813 cv
312.619 463.064 305.548 448.872 300.973 445.375 cv
293.711 439.825 293.468 441.984 286.164 443.033 cv
282.391 437.674 li
279.708 420.9 277.879 403.085 281.359 386.784 cv
282.341 382.186 285.526 375.573 289.497 367.955 cv
296.698 363.056 303.22 357.378 306.639 352.293 cv
310.102 362.488 314.212 371.526 317.888 377.219 cv
318.196 378.229 318.514 379.237 318.849 380.241 cv
318.834 379.703 318.842 379.164 318.846 378.625 cv
319.334 379.317 319.816 379.966 320.283 380.521 cv
325.42 386.645 332.365 392.313 340.259 393.52 cv
321.604 387.293 322.971 363.129 327.556 345.446 cv
348.583 367.276 374.212 387.931 394.07 410.079 cv
393.284 409.415 392.492 408.781 391.829 408.123 cv
cp
201.16 436.461 mo
193.536 451.903 180.818 463.811 175.28 480.964 cv
174.667 482.862 174.121 484.818 173.611 486.8 cv
173.592 484.243 173.583 481.675 173.587 479.096 cv
173.6 471.795 173.35 464.373 173.005 456.887 cv
173.071 456.145 173.139 455.403 173.215 454.673 cv
174.875 438.831 176.867 421.99 176.279 406.936 cv
175.711 392.387 180.811 379.096 185.005 363.249 cv
186.098 359.121 187.131 354.965 188.13 350.798 cv
189.044 354.609 190.121 358.403 191.437 362.172 cv
195.021 372.439 198.193 391.326 204.198 404.108 cv
206.317 415.042 206.212 426.228 201.16 436.461 cv
cp
162.875 712.188 mo
162.406 712.543 161.928 712.86 161.449 713.172 cv
156.724 695.174 162.631 659.096 164.941 640.663 cv
164.322 664.508 163.376 688.36 162.875 712.188 cv
cp
162.761 717.082 mo
162.488 716.453 162.243 715.775 162.011 715.076 cv
162.296 714.222 162.571 713.357 162.867 712.515 cv
162.835 714.036 162.789 715.56 162.761 717.082 cv
cp
156.302 725.083 mo
143.971 723.901 130.397 716.501 117.61 710.388 cv
120.296 711.077 122.782 711.71 124.856 712.212 cv
122.157 711.407 119.419 710.663 116.667 709.939 cv
112.316 707.877 108.065 705.992 103.993 704.581 cv
108.92 697.036 117.885 689.059 121.894 682.129 cv
130.157 667.84 135.462 651.791 139.604 635.924 cv
140.233 633.517 141.933 628.94 143.367 623.931 cv
143.609 624.099 143.853 624.254 144.099 624.386 cv
149.313 627.184 153.821 624.129 158.559 622.176 cv
157.603 653.8 153.595 685.21 154.741 716.898 cv
146.239 716.01 137.795 714.755 129.125 713.164 cv
128.103 712.977 126.626 712.641 124.856 712.212 cv
128.052 713.165 131.192 714.204 134.22 715.42 cv
141.709 718.429 149.003 722.074 156.744 723.94 cv
156.6 724.324 156.444 724.699 156.302 725.083 cv
cp
154.726 747.635 mo
153.454 761.741 150.86 776.34 148.926 790.887 cv
149.866 777.387 151.318 763.367 153.629 749.715 cv
154.007 748.576 154.412 747.449 154.833 746.329 cv
154.799 746.766 154.765 747.202 154.726 747.635 cv
cp
432.958 409.194 mo
429.928 398.984 414.47 384.53 410.691 380.039 cv
393.81 359.972 378.032 336.449 364.956 313.666 cv
361.027 306.823 355.846 299.202 351.036 291.29 cv
355.49 273.373 355.391 255.057 351.21 236.534 cv
345.749 212.337 334.73 194.538 325.823 172.295 cv
318.44 153.858 320.71 134.081 316.435 115.198 cv
309.34 83.8633 295.49 75.5801 266.893 75.477 cv
252.858 75.4263 238.942 77.0093 226.916 84.8452 cv
221.604 88.3057 208.973 98.1973 216.706 102.425 cv
216.639 102.085 217.021 101.83 217.707 101.645 cv
217.025 102.327 216.345 103.006 215.661 103.739 cv
216.325 103.609 216.921 103.375 217.368 103.139 cv
211.972 109.313 208.124 127.803 211.31 140.235 cv
206.9 142.613 201.922 144.733 196.95 144.125 cv
202.517 147.936 208.139 148.789 213.31 147.602 cv
202.321 157.811 214.815 193.502 220.983 204.592 cv
227.53 205.004 233.842 204.265 239.8 202.582 cv
238.039 211.943 238.908 224.416 235.652 236.17 cv
223.989 235.286 206.856 226.095 193.141 218.605 cv
193.135 218.732 193.137 218.86 193.132 218.988 cv
190.921 217.997 188.682 217.355 186.551 217.328 cv
185.674 217.053 184.926 216.89 184.364 216.896 cv
153.889 217.209 151.389 258.285 152.341 292.315 cv
152.245 293.731 152.144 294.935 152.033 295.827 cv
150.248 310.208 149.868 324.722 149.336 339.24 cv
148.65 358 147.061 375.058 140.591 392.623 cv
133.699 411.336 136.535 423.317 138.888 443.26 cv
142.355 472.646 148.554 501.721 153.435 530.875 cv
153.467 536.112 153.096 541.082 152.026 545.409 cv
149.368 556.164 143.207 561.028 142.599 573.343 cv
142.118 583.103 142.699 592.987 142.579 602.765 cv
142.477 602.96 142.375 603.164 142.272 603.385 cv
141.336 602.861 140.185 602.55 138.756 602.521 cv
138.704 603.759 138.625 605.026 138.534 606.309 cv
134.812 602.618 130.63 598.933 126.903 595.341 cv
130.355 599.665 133.655 609.168 137.49 616.27 cv
136.948 620.238 136.24 624.343 135.388 628.521 cv
130.074 645.919 124.203 664.023 116.007 679.999 cv
118.864 675.48 121.556 670.87 123.968 666.15 cv
118.074 680.478 110.553 693.781 101.62 703.81 cv
101.236 703.693 100.854 703.582 100.475 703.476 cv
106.511 696.562 111.598 688.592 116.007 679.999 cv
110.924 688.034 105.321 695.772 99.8262 703.297 cv
95.9331 702.264 92.2422 701.796 88.833 702.188 cv
85.9678 736.002 70.8784 771.218 66.2051 804.535 cv
91.3076 801.688 120.629 817.267 145.09 821.783 cv
145.279 818.874 145.435 815.91 145.58 812.908 cv
146.012 812.826 146.418 812.743 146.782 812.66 cv
146.572 816.571 146.469 820.461 146.545 824.313 cv
148.037 820.374 151.224 817.336 153.717 814.053 cv
154.117 814.198 154.514 814.351 154.909 814.508 cv
151.571 788.105 161.833 757.949 162.796 730.538 cv
164.008 728.707 165.308 726.921 166.713 725.19 cv
165.564 725.197 164.432 725.136 163.309 725.039 cv
161.876 725.224 160.414 725.268 158.936 725.237 cv
159.006 724.979 159.07 724.716 159.141 724.459 cv
160.514 724.718 161.901 724.919 163.309 725.039 cv
165.096 724.81 166.843 724.396 168.547 723.785 cv
155.89 739.724 162.851 799.176 155 814.546 cv
160.706 816.838 165.86 820.264 172.038 820.383 cv
172.267 804.773 174.95 739.714 175.039 725.14 cv
175.202 727.674 175.366 723.47 174.664 719.939 cv
174.363 719.986 174.071 720.053 173.784 720.129 cv
174.06 719.505 174.331 718.878 174.621 718.266 cv
170.709 718.145 166.854 717.938 163.029 717.654 cv
162.96 717.509 162.89 717.365 162.824 717.215 cv
165.957 694.035 168.188 671.801 168.2 648.333 cv
168.203 642.356 167.479 635.489 166.654 628.909 cv
166.689 628.732 166.724 628.559 166.76 628.381 cv
168.167 630.096 169.892 631.597 172.002 632.826 cv
171.539 625.184 171.91 609.763 171.042 597.875 cv
173.694 579.835 174.44 562.14 174.479 544.36 cv
174.51 544.454 174.536 544.551 174.567 544.644 cv
179.636 559.541 185.41 574.217 191.48 588.805 cv
195.631 609.112 205.557 631.002 210.942 648.354 cv
216.743 667.045 220.509 686.663 222.426 706.125 cv
223.654 718.587 220.343 727.963 219.583 739.544 cv
221.803 739.879 224.117 740.096 226.483 740.258 cv
226.112 740.782 225.738 741.283 225.36 741.751 cv
214.984 754.593 200.725 763.035 192.29 777.476 cv
178.418 801.222 177.528 834.424 170.333 860.76 cv
167.678 870.483 166.867 884.544 162.518 895.072 cv
155.417 904.264 151.557 909.998 148.059 920.363 cv
142.754 936.077 140.306 954.238 133.242 969.521 cv
127.514 981.913 121.648 984.897 122.428 998.319 cv
123.287 1013.1 131.598 1034.3 143.947 1043.17 cv
152.359 1035.25 158.955 1019.5 162.185 1008.48 cv
165.24 998.064 164.106 996.796 158.015 993.129 cv
159.964 994.114 161.951 994.959 163.884 995.613 cv
163.523 982.767 175.812 967.029 179.305 953.947 cv
183.528 938.13 182.384 922.441 185.385 906.75 cv
188.611 889.882 200.25 877.575 210.482 864.469 cv
206.442 874.125 203.292 884.084 201.872 894.733 cv
198.245 921.909 200.602 949.692 196.265 976.91 cv
193.109 996.713 185.932 1017.3 176.246 1034.89 cv
175.426 1036.38 174.601 1037.78 173.781 1039.15 cv
173.29 1039.6 172.793 1040.06 172.278 1040.51 cv
167 1045.12 161.106 1048.15 158.403 1055.26 cv
154.678 1065.06 156.017 1076.35 157.051 1087.59 cv
156.982 1087.84 156.921 1088.09 156.851 1088.34 cv
156.941 1088.34 157.031 1088.35 157.122 1088.36 cv
157.167 1088.86 157.211 1089.37 157.254 1089.87 cv
153.904 1098.18 149.478 1106.47 147.362 1114.79 cv
145.48 1121 144.509 1127 145.294 1132.51 cv
147.211 1145.96 176.094 1157.27 189.523 1154.54 cv
189.533 1154.54 189.544 1154.54 189.554 1154.54 cv
189.583 1153.02 189.401 1151.58 189.092 1150.18 cv
188.026 1141.61 186.038 1132.91 185.512 1123.96 cv
184.694 1124.1 183.869 1124.25 183.038 1124.4 cv
183.041 1124.36 183.045 1124.33 183.048 1124.29 cv
183.767 1119.42 185.648 1114.93 187.433 1108.86 cv
190.003 1100.12 191.079 1091.5 192.012 1082.46 cv
193.347 1078.49 194.517 1074.75 194.853 1072.13 cv
197.206 1053.76 202.651 1037.08 210.952 1020.32 cv
234.237 973.302 250.469 928.333 259.823 877.146 cv
265.322 847.048 276.59 817.135 281.112 786.57 cv
282.881 774.619 286.358 758.75 287.814 744.266 cv
288.118 751.869 li
288.775 748.357 289.726 744.109 290.618 739.527 cv
290.625 739.528 290.633 739.529 290.64 739.529 cv
290.649 739.447 290.656 739.363 290.666 739.28 cv
292.436 730.141 293.938 719.706 292.409 711.087 cv
292.849 701.921 293.455 692.772 295.059 683.891 cv
301.64 647.438 315.438 612.01 319.468 574.9 cv
322.022 551.378 324.658 516.897 308.86 496.083 cv
309.128 496.35 309.404 496.608 309.708 496.834 cv
309.813 496.455 309.899 496.073 309.995 495.693 cv
321.631 499.622 339.816 487.832 348.424 483.438 cv
380.731 466.947 416.63 443.522 436.289 412.304 cv
435.169 411.285 434.064 410.239 432.958 409.194 cv
cp
f
77.9243 696.626 mo
78.123 696.521 78.2803 696.438 78.4204 696.365 cv
78.1284 696.406 77.9497 696.488 77.9243 696.626 cv
cp
f
154.93 814.691 mo
154.954 814.646 154.976 814.593 155 814.546 cv
154.97 814.533 154.939 814.521 154.909 814.508 cv
154.917 814.569 154.922 814.631 154.93 814.691 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 21.0.0
%%For: (sophik) ()
%%Title: (BW_FasionGirl_2017_Silhouette_2.eps)
%%CreationDate: 7/12/2017 3:05 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj9lDehI#N^9?l##7r7N0_9f.@>LYV-od7gJjb>9_sZC[iVDm0WiB#2E6@UtqZ&NtDhV_%eXEB]Q)1=a4m^\"c?%_=1DsXg
%EL(+%&H9ZHkPpj6p8p-Wrrl*IXq'2uB2IsJ<O:T/fIa_e:PLVhNDA]YG_S"Dkh9j\lp!i$Q;MM9(bIC)l;l*Xm9\NaKVSa'&+Yd+
%n9H*F_$&sX4t](^gMj*%%L.Ffb`14;gIqF17&ZgZ<c@G;NkLWFktW!Rpaa-enP5BQnlJ6Z)"dVfMPeel&m;YRG)`(JYj;iNPROhd
%h^Y-)A^.e@C^gY6+V+oD%\b+'74`Q/77[3!PQXO]pcldoO*kFPpAk.FcD(>%Yd^7OB.h,X"L:e-Qpke0"@-E_JdA87B)qg@!H_ie
%,Dip72V[&R0efjT-&,!ITfDl.s$D9&4rBAo\:aj,1)uKSjH-+Y$%[`tZC50'#M@K+o7poVOUUWH7a:9[U=OXCP4]WIeC>Q%`7_A+
%p<GbN!&u@b@k*V[O^0bI!:NXT[gXg5+//J="&Ut&cfP4leSYhY.$>am?0-=`/f6fIUm.CUa@Y"MPjJj;C7Jdb_]YJ&X8m:H&5j7'
%8rHV93%"F=87t@iTF'i3ZA_1N"?ep4=jL+r)&H8j23E$'Gctc14;F0mO@"D)1(oK5T1],DfE1GmJ_?ap@(F>%Oj=l3`)4WZUYH]p
%.ilMo]]0_(:I/Zj9u&/m$k.NR=$]$"L=/9kAfo;RnAFk][j7[)Weu7<1A!!@UVApPcLO(YbOaerY2eJOQm<h/8OD;[$%YY\!g=m8
%Vj",1Jl,MNUV[N_Y,Vb$<=p)EKRP/M9Ep&Z12(>JK?e!_#Y*Fn=^@@>4C$JMJ?G)%"DNHC_2,0acD%$)4O:oaoETpj]$P?uL?PA]
%P&lF-oGbUhU<mgP4(SX7N9EUCd5OH-qMh?rbT]t1U<mgP48OI;,J)7%KVnqT"GTH7^CcF-ULR7q(jWu4_Fq`qoU?78e.Vlhq?/mc
%5";-$MLpp3"GUSX^X6"KOG%Xpc4M&mJA;_U<76FWA2'_irC5ZUJOC$qD[1Q0#lR5#Ldq$+#a;1p@4o@rX\!X9,>U1RMN4?#G`TWG
%o-eM_on3=(4@+t.9]i3],9ZU`_&rfYNZnPpE'cQFNG(_p&K&o<6mLXu)2s"h(doJTVclhIM6N&B5r>.41K>?nG8PV"1.3RiO\j^D
%mM#L(n&`_*Go1fV(ePl9++_i4an0*FEh<1ga:goeRS@<g(dt7JnIJK.chba#(f%3bZST`TcOPc.;]G3_&J+WCM-@V@D9?Wi)@._5
%:-@<A#t:2T9NNPSPG'PNi#hUCEL!Ws_f=b%pQtd`!r;9_,sO(g'ZhNe0DU`Ao%j19IM@K`<tok$`VIn<Em"8PIaVs$h>9io@!FS&
%%XEQG:G,/OH[j-Jj8M#e*m"ul-LrJ?kr8/LdDuV36.E5%ii;T3,Nu_9T`=YcSCVgCbK7>i/"A/2HC!U=&TeMn6lCR@=Z29=!a(bN
%&KiI]UDa1K3BU..VVkS[NE>9s3;P"8@=[]>PLe+a.[cl*0iXIfd=h!0VLmdj&.8hq#@qq80WR0#1gRr]jq(,J)dWM86Ur#qgNZJH
%,b@7G'6"h%%;,a.GD9Y!mi%W+EB$\ToFJ_NEmFEL1I-)>U,Wb._R$*[Zl*M<mNAM@ee&2!%/l4W#6b3>iS_7pX&0)\@;0B6%/CBD
%k]f'!N,M/8RidAr8+D5j3Z0/T*R:F2,:dM.N!NF@"5u-]"tL<)%b-NAR3ekaq6,#n4-STf0pc!<mb0(U3BEG##E7pe`];5=1$rL7
%3D3,AJRfU(9dSLf2;ZAU9EZ6)-Knp(eF:&PHneB`,8_Aj/-Nk3cL;G):mjA%_-j5U]SOjCBYbi``+hXk$P-(]5YMBj"8![/N.3ru
%174nu`DI;f?n`t")um\ca%.r%Ou%fBE?iO<Vgq0'&L.tbM.3\$]0$ZG$k_[mBb?u1-6]s*7bA!6G)Er2qs4ooNSq$tGT@u,1''l"
%d;so!V#(qC[!Tg.$9E<13[0*sRtqbm)0K&'6<A"8\>)"n(W^,T5Rulc.ih*"3oN1]kf?u+MM[U"-5?@IdYJnl83W'l=Me!!];'9S
%)poO!$[`U:<,%1Il]+J6>\R^F,0-oWqBhjR8QI4QS".F4Y(Y9L;9kZJPm`[?Pu_l+JNF#Mg\Xq-mil?aQE*E$*Ej7RJdIQ%$n-T^
%8)K0#ZGb5OaJ*pC+E2N;GoQq/ItSnU*Hh7(7bM4/8>eeM3GLF3&*l\&7e1YiH9N]].?7El=G_-o@"^>g?22bbAJ>(5U+QloFBY]O
%A7`d^O'"C=Q@0%%l@sr('.*ip"kcg[a2a#X7u54)djqTPC"0IeIjViT7WU-k_/!q9pLOf8jEFJND.9A>S"oB[Q>j4V:U:.t;Yj\V
%PGXX84TL[gB_O2'k"$+#\fU!dk[B/]_cRMQdkS?rNg_b'TbBEr$\-')8VD42LcJ=cV7:1AR$*1M:VRR,d0ZqnT5)Y*#8a"Zn-F%I
%-Rs>\UU_qM<,+6uE>=s>::11Z$.lV6eBp89K]R2Y&>uJX;=4'48rATAeTAA&Sd8id$]uLf0rgCHUlH3MQ72X$.#i;NacQ<I*]3,'
%<1*r$+!(R-(FH)^M5P>6OtWiH*-V]W=f(6]G`KV"D?:S(eMUG),Y<#-c;P=Df/ThpSdnS%r79hobXhBU`fsQ#>"5de,ik.N53ZPe
%iIJsm&j./23[)s,),9WI+$PfIIbj\c'J!WHDNOEN7]QJ,FVea6mkOB.?u]I`L*Au3)#$)PN"ZsAb#J!R#u:-@++aebggQ?1TUPP\
%c2"De>3APdkt,(=]Q%G![`o(a2'I9CgKh_A0SsH6q`;"cXX6LG!pQ&,"-n_4B=Sm%@@\3j7))ti,GhtBan&JuYg2@1QTp\>cr1sB
%"'%'Rbr>`m;Eo'H:;k8!#"tpC&8ju)VVj4(<d\_(8hk7,RRZ6Y7CA[5Hdj#u:reC*'\W"IcK\.6LQSG!i4l#S<%ng2]F7<*C-s"l
%k`pGC/Yd$ngto)GBHc_Q<k_,-H`I]%I&s%tb)U^M;UQ/JGDZnn2m(Z$"`tjOUel.24Gb2jbjt\&-OD`;#]?fg\-C.)*0/PiVJrj(
%&nlRcG$<*N[lP6%keU5/9#c"D$<:3]2-u&]1-am8BE+bqTT`:_l1@`<E$M;RkP(t^Iq?e7G.R[m.E$Vri,P3.[#f9^Wc,S1;[T5@
%e9-@\b)6i*\AD+(TR5-L_qc%acc^[hVGU\f_kle^<OA4AB^Oq_9!m+Af'scY]aKfLXcoa3g$)o@NTqe2Go_J>>/r'e!5_)CI<QB<
%Uf6:<5Onu21f*O'gAGu8eQ!U2XIQ+lV'W0>VarDn91,Z0o.?fN!SSW.d!pN@W1$U_Fo,68DWC'4pf:BckC@<>:7GNGO=E(InZ>Ap
%-IHsH<Q>3H4:s2?c(0l_lRFV`hO;0P1f\KP*Z6U([$iKtY?l1-1?8&nkdo9Ke+i>f1J-h$h1BRLmO%>(pEAo)+umE2Nk:G0n`_*e
%nLRh(=H#Ai+=C8^hGCe`F%3#I4bq".>JH)6d75-;RNpXn]N4],2/[$fcmq-KVYrN`?_,QNFCeA+q@[g0eDp*j;WM&M[\5D<l24NT
%gr\@.'F>eu,$aZL+k#m'\sl-^eS-l3kBc0h4.N3reS14KGFPYYlKBXeQnV7[;M3Nuo[.pGRHiGi:?MV@iXL)u%nXrl37(W]E'X",
%kB5!R^J.b&9(>@]BdTKL\)ek_7.9@9ZihEn9;hL0\c$;&Y=#8aP>RbqH<A8A;'$<%OK=TL@lH!9H+YXef?/ppnTThhRHe[]+aQ+-
%rA*R$`-@tF)m+"-L1FFdB`?fC+ip!]\ihQ!1Q_]pXWAV0lb&[@ihO'O53b@\CiR'9^:_eDOO--dX*B/`0*NTClGPZQS>Bp$_90lu
%*NScT7]S&CMY*771`(-^.Ga;nd;i(SQR8HUS`E<H9m?1iY6XIB7BrO]$Y)N*OPkb:j@#Dur5HqE`g)DS&P+S&m2BC9F'aoroPH]J
%*oRO@S:uBOCTou[FgH3oRQ)J/F/G0`.SUH/!`5b.6>k"A#\+k5*)DL#NNct^T=pcObG++b8B"/Y:k&pEm+Mb=,?T1?6a:To'1^r-
%=O?&d@NgcmnjLQZi$^s3%Y6Y+?I6cQKaAh3LqPnG`$bj[HlFZQgrhc9G^4G%;an%h8BC:f8R2QoHY@HNhtk]jkcK/7kNO07`H**-
%"lWu.*(.EOaSA7p=/2)LFB#rFV<Tt,*=(N*7hg0c=ZI3\qo76IKHaT7d+)fPl/oLU=4K<kg68Fa:!_\K;*CRtXbMt9laa?"&GNI[
%m2XMbS85uJ<]R`(Q+G&I-*TkP0Td#G?oKr`*9)d;;G1tUfJEi,$g%:<0:+<6+K)Lh;9nQ/MY+303c])S.u2n,Z8AS$*(uh[/XRNo
%3Iscp<.u0jf-R-4,'DIC\'V[olo*GNmNASYd.Kq,ilci@,+bE.]J/Eo7fAg[UI%,WkZndqCMBRCNRg(BSIWgW5FDe&a\@=C0C@:[
%Z5l"%\4gS^8t_O9W/c3aNDK!udVF:+<uB'K=FUR4-n6Iga_:oQ"&bTMD^4?l]k'M$^=0&qEoP?HplY<>!431-.Ce:FV^p-k$bU@2
%^2Q\Ti8&`G(lSX]R_q[DF*ssV%T6Gg0'3qC^?1_3(-2mrb"+\S>kW7*J?Y'2A\O,Rja_8</0!-?1h_N43^IZU_@=U-IFdiP-@3p+
%RU(l,5T_cg.lH$>EYBiK5SHl@*)B<Yds]J0?_/u=Q;?i9>4,BmcKF#gH+M6;&rAJQVc7XcA_g(n"Lm<38K(sUnM\=$e!5;EST\jk
%Y*7GWdJ"h9'oY9/)>CEg1,4ak\6248),9Y`V%M$l[%-K><6ffR3ik\'Q6)dOKH-hd"f##U0f$H.6PuAX\7FmV]ul@W3;h#\hh;dU
%R$52!RX64&oC\+pW6Va&;.]E(X5$g(?e9^a0V5JCG*_f.Mf[KoY.K`/V1K@h3S"Rc=MHWj.4?gD,gl2,m?eJr7`q9\?\,2k#<:-&
%8?UO',0a`UfL"V)`nrMGT1EQO6CI<5$GNQq&k6e<_]%\pi'$/79,I6g!akmgNgK1G.c_7tF4ZBR9RS&F]m%J?!M-#(hN]G@-TjMf
%3iYTN,eOK<GEJ7&b'=;Wk.C&>3C7Ltd7MPe!I=Z6pPB>Tk2r1c\(HM^Zb@r-,bBA.fq[/[S_#;*g_E?W)u]1`>qSk)mHD3XlhW#R
%Bj-BqF"]]OmF1%,RlOkD+;X1-^dsG.H4r=slq$iIN>O,;E.5"KP!nD,I$nb*j4!dD?'fh36LM1'R`5(#Ml4_O)"7-[]T+=)SrLp2
%gYL=:;PqmKLj!VL.<^sU[%8AM[,<c2^&G\)b</a(^FV@R+O[s+JpSf.Lhjp\qCea,p\MG5k8]7C'/Pt=.M+r<8<Td]2jok4EP1T?
%*8YHf&3<Aq/,K*$mO\i\pt-;t/k7uMCtdKiEB-@*Eq4K!j%hf-"IdpB'!en#7@?cETP#7P;6dCAa/*%=L)qLX5%a.>HK#/m5XHMF
%.JE+orTp'I^>O&YF"lt[LHIPK%m1of0YltHB3>0)J&gW?nlT];iT+=k*d7.G])A9$>LdJ3`=-%>eUcP_r\A8_PKF8\M2#("G`KDr
%-0C4(i1IrNIj.7?M%Ue`o-/t8LWBcfG##9u5QQ9LiODEdA/XNQf1Qr]2u3\uHHYN?+`\@<iihumORZJ[DYMlA"EuuG&UY-r1?7=?
%ZA9(.+ThX84FDm5Z4J4$jZ5WMQJG!qPA,Xl:i%!iUDLcprlasN?na99jrK<R,UCPV+p%<>%Di`t7C3%F,=Kbl<?RgV?G?kGZ@5X$
%]D-j^i&_ZaWIiZG1W:B\;CW7RdT^`<M<YbG!64)(X^Q_+1I/8Zk+Cd;bEeUZT\B1E(+)uXqU.fBcj6IPAuF5[n+D6saZte,qC>Hg
%,k;!BJZKPR'W%GhMVYT7D3#@i-jMF1JnNLEkAZ,p;'o5X8*g[O5$,N4bjZG]SR=gV=2D4`"9Qt!36+DkWKbdL=Oi^?qUlsXJW)3k
%Zs)%%cfd9gC+.mWp)B^2D7BKFIWI[dULqOCoL!T1,aAa1:!g.BoL3:Q[`V]KIXEl]#hqV1MB6*jF\XtcX8YCW3SniA&uCESAGulm
%>&QY;qR;XINr!C2cO$a0k?&is0Z=^NanXMl<O$.q'>[S+n2WK+>pd(S0M;\GIS$2Mc(We3Jn4/a3'nn7mO\/Sd<*ShPcIpun30AR
%5(tHa@6ia%=HtP6&e]<BlI:>3V4fb#8Qs8sZ9t:1Nl)2:=p1I1G.b0*]4?7%QTP\p8'%e1R<(LiAPUK*jCILa:UaL0oM#7=q`0mo
%Dc]G_A%Q@4cWR<+St7le5JK1c)-[!Fh<Met3&%XN<JCShEeSW9e9X8f*2_Go>.'sT_%9jb,MsA`-df-6:R&3&a]0;CpV&d<U7mPZ
%XO)56*V%$\%@nYb9FTcJhuhntd3c)Jdg5UBKW*DkO5QcMl?\7M#g=Oj276I:!0IP#;RA/O?PDrc!"D/jRtQh:dndiQP9YWiJe6<`
%Xlm\H!$r=u]#jccWXTjIW,^bHK4-lZ/s?+#&Y3A-UcL2YQpEj/+*^]S*=R:[YK?'trF%44\l->#3KO@gISESVkaQnEHl\ZHC(QFc
%#!XQr3d,4FiPr`9"SOPig.EcL*f`K];A"[9@'KGaH">EkFLdV82d!DY@Jt>+A<t!)bD5WN]Ur[5@!+[(N?cOWJsqpQQ0_q_C@73R
%8e?j]&MuLo5"*afK\\M*mkFek*pA:E-"FErFs#=X!R0Xa@=_(:Y7]F.Re>%i]X"$hb"e=*G4Wjo?J59_ErI)E>lZ6,YO!TAf`gTe
%bmV/J/*uOa"&,D2Cg6j`BfAa]DdM/B9=oI`2q+UoaFqoW0YrQ/$PYCEY`mN8IoF0EG+4^]Dlr"?SP/X7EuP8Jg_)pA/>>)'3-UpM
%s7eIq=j5oQB")=Sko^qQRYC/s%)<>`FE6oEB%F*0a,Y3dTC85g+?KuE(jrP$9+J`+9R`,OQ&dX+?d!:#IWB"C!8;1=jAh\FUcNZH
%Lg=#]_tFYTllq7=I)$C/:PdifQk1ccU3C.`^J4J3IlGb:-bcGoIgcs1.,^obluuZ7&-5gk<Y`:O,QLCWkeqcK!DKP'4pO^T*On\'
%@^Q+gIKgpmBD)R"04;\P5Yd34T%UP:N3K(f>:Wh(es^Oa@s"eq+P/N*e\3$!\Q$b@5:l_uV*Ni_5PScIJ$%7<(uM"YYI$L;"D4oQ
%)iU;:\gmM]rJNgKf^E$6-iGc"e*R6d\PY9XXhTAn2XP,V4$.m)+fJ";I4)pnr7$5\cXs);3Gi(F5bFtm`:060[/0htcfR`>NmPR:
%Yk/>h"!<1#I_+Y1dDbbj)MFO#+K%CMrgN;HqUfKRX?iUu%YA4B1E.P@pk"!4OIX8t&\faK?STDhb4NdA4e%7qPIuK?YaAcbSmOjV
%?UOgjY9=-q`,0r4R3j9PCWQ*_aRa2go4uE,Jtf<e*4$M:Ra0-"@s$8R#gd%O?T4Q`2kFA8rlCkZY8bfk)c+:mYk`G%#oN\$\8E:Z
%K2o8CojQb%fH#bhSKKueB#MX9[f@IefW.A6=G#$K8;8o-4t4'lR]VnSa4J8;cuZ,c&?jfi5csYJ!>?uAJpP)&EZ9S$Eo/hC&]lcr
%D\SE;;`*s)br]H7eKG=]iP.[J9UrT6VRT>inr_2[SnW@++j-4B?uji)^%oRO>NT>"B@]!.T$dB'g>9Jl2Xd9_qe#rHo=TQ24irj$
%i+deqJo:\%B0Ot)`E=Je9u^O@HPgG^+;](8D47P[)\Id3q_tYW:.0&p;/ihLR8eP,]670s9DQRZQ#G)u5d)&WCq'/nSj&OgD#aTQ
%b+\_L)R4499WimR:13M9/sJrB7%cJLhKYGI?KR66H/n#Dd<KZb/>VgqFCB.gA_q["2dYX+Q[.V&hK\kJ2dRht*ds[XI&<cl<,r>;
%RI22G\&WN=W@'Fn*L:WQA&WA)),8O8c1Zl,5rKUJp'iO(D"]RM)cd*(_gK@ZBt=mnqP3%ogUmF=mT.`@#"?H+YhqVTN`-p"VEHoa
%GB92X`sJ#6;]d-7qqZO6S@"7;]/Y5B?(?@0Y4E[(juYOs8ko=sHQ@s+Z\=N0[P^Bu*JkE!'Ek]J'&)A:i5f94kE4tELa7J7J,RW-
%%23/;SG`Y1K+1;g[(d,Pr*JiE%7JM>IB^*(R,(Ii^/)4T^?rlU+_m1>k0.aj&\ne(K#FVA"G9Yb)M04B[0^FQhrLI6]3arq"(Vj(
%ZPN&EL7*$eKXgL2]M:YcB=co"]k,qUElWI2dP@iIbn)mGGE&U[pmGY*Jb#;&_4JdnE0J_^J2c'*N#`(tB3*5I7uB6h<qLUKoaG)#
%#c_7\*_a?)rFb"K46SV^Rf,b=Hhk*gJ)A%h:VWlUqYZCDTZ8<jpA+=UQ@;aPF6?d(rF7Qrg7j/j%3Lnq!sF0XHWY"amq;H%l-n-E
%/bL-mgR74dZ^L90PK_sSm^EkFW+L@fSR:#Fkhio+c9*PENML6Z'E-sIbb$$X.*0]++J3lI-^4bYS)&Qq2"N*9VrJr2q%Mi<nW;Q(
%$1d>?Mr4L_\Tr.aY2D9hJp]V2j895Skm3=@-ckJUEI)3gYDnOJfKoL`2j";'_FY+.f:F7[2Tbk<V`6d/poRZBUdfa8(P2n&[auD*
%:T=NW8"fh9rP4U@W]]WJL+T_Fj:rLfF-Sc%"Lo^Y1&@d(1LGo&I#uDA`o&45>K8?*X?lNS98OmS)^2_seI&+2,LDVuY21tM+Blgo
%'r7$_`dLFH48gElad70/h4C,G1!Y:;I<(Br/[Ljjfu:-S`i0JSHSE&2a^&YfkiCJ&9G_)DSltUspi2n#cNp"X2t=R?q=lS!m-fEJ
%DNZn7o6Y#d^V_B9nGjI%eF/RjqmoH7+m7p9oK;IcXac'aRJ8l'R=T-"^Q<e;]`ihr)skqJ"Jg%9gA-3C@)d+/8-F2@Bbo1^?dlTc
%pBl@i!^'1:CK<:`$2&M"5Y0M0l=Ni$HG?GI1Q*''\PRfl1BXE#1,"7Q+%MtO-#JUZpM+^4_bTl@-J_3Z%PaZfRa$k]mEMMsZ#aP9
%93RXQkfk9\`'KFeQ[;3"?Ou]3L+1XJ?[gp@lFS+PQD[H*gA*<>+%5EARn:q1+7Dc+ht!YP>4W*an*96:(<bTVMrelo@/f_mfmJ&X
%.m#CY&tF.jTbf'[8Dh2Zk',@*q#,+%)h.fAao&"GojjYR$Z_)7I\ZAHm7-!426?97p&iuX]k=g,"F1D63R8lScq?HV<n`b4U1\XR
%7Z]^!NEXRF=?hC>R0Pd`AjjnF>Fe%6=98_$@uq.?jjFZ$.FNgd._jX"lGo9NY@TX"5:J)$O5cE(k.j5+X%cJo*P3!'[&VYbHe:**
%ZslLT-Uh(ZlBk%k/QAc?X*S:]WSDopP9S._rF,U4TQZFE%ZF`0gm:9$cFLFO%mBW"D>d<VD60[R"\q1/:E.79=RA@so(s=[Zi6WK
%GMAcF:f]aHNJ-27oji4u1<`t#?Y^!d.WXa,lfas7)N-A#a%ICtl+/"3=17]'5iTo?f[2p7Gms2taEK:&rs'(-:"%sKq,Y_Mc2D7D
%$d^3pmPYl3"`p0&gYBh-LJ19OLoj5W\WA.qY3gYE6/TGu_ud09B@O"kOT%HJS5_9Ah):V%=eG>0Aj!moZ?tD^h6NXT>W8.!^44r0
%8TW2oJ-C#?2tq]@cSmAG%m6H)Odi4Y^W."E8!N+*;L$S&ZLA^l?D:eGK9Ot!K4C4]-6pV!.20??,o@4[[O.F#c6TJ&KSY@#m"J:h
%i,k1SLK+`Sp+Zei7[&Q%p/A;Z2?\@mkH$gc1%S2_Itq=-K$Z4=RneBqpXa`g[!t;ETA`MA7c2Xa%/;UArnqFn2d@$+8a5#SI:`.3
%E=(h\0_<n!#>i#-l`=`pi.-CrI_Osl?NHPbf*(Dc2Ad=\hOY8\;%^H*1!(E1BNt);<mP]Ar9j^Oe>EH,DI87XRc@)i+3jM6'(Zo[
%qIl82ORos)@2<1jq-@=Hq;![(celh>mgY;`=9SXrVtYOU9/LJuRD4UM2e"MV+)&A_e1]_PoNQ6IR`1p3i3CT'XVqjK7H_-p9P&UD
%hl8EG<TCP6nFQC+IHU1fpUnXdG05DNPK[r]>g8:*k-`pU<h&5Tm2t38EC0DDLeG((G=Nc"VZ#HeIfAiYLXaQA_^>JV<1S4i-=6#^
%3uV%c$7k#,UCi06Gt2@ZCYi4#q0>J?hU.]Kailgbo8^i'UG7`K%D6O$g2DTiT1.W&E_$hrECcDql+PXpF+<?=pH$%+2B0m7l?!.Q
%kMO\O#Z0a/ghX/!_d;FD4daA;R/*5VB(F2KK<O,ri$4;AqN<ITnk%ujoCj`IacRqGcpTR;2t`0%q3r,]p"m@<qtp%mJ0\Q0mnF#n
%o6P?OaSC&0HNA$7S_&4PY4hu'BjU4%?b,oX?\CNppuVb;]\o7qI.MsYHP_&Rfh`b*H0DFS34CQ9n)%UKr':"E:3hs<rsncVJ$[Dk
%fm/kGnfe\(;26$9f?STNC\`1hBkK3u*.=UY4,B'u_`KpWY"\I(hg@8)A!>KE\au9.NUkuJGm3F?bamAcVU"uIc]EMVT2c1o2:%;2
%:LLr:hdt_%r9BP4@[M>V#]R\sbZtUX"N_Kn`RpS$q="5Ri4nYOi7&[rX9>+4^RQ2"_4H,&G@F;AAQV6_CAP-SIZ&$8&jWR2-?9;6
%B'QRaSHZOAP\Cu*NnGnM/[H@shsts3V!-8/>R(+KqVD^ME4!_jrGKfWRVfAe3&8'$)02)Ur@dg*,<PJdCRO1C5uK]M37Uc7lJ6c:
%2Uos\osOnM"h=A<2DXOtP*qSo3eQ9SHh<_JVVAihH26VSDYOr;a/7^I"_^l[N!g"[b]ePF5QGT#p[!'bqt;_rUgt?.PQO!<*3pq^
%6dN]ml.;.:[@/tWIKYM.*pBDu$K/#aUs[/B0bIdA2[Vc(p%p.op0V5:ZAB]TRM6V[]+[U2WmtO)prV=s,6IE::Pu6>eM3$`)t6je
%<qXNDZ6,>BFAbL]!E?424pO\/*4SS&@^Q+gIKgo"&r(tb$^b*/a@VLnn!W<F!Gn`Q[9CCaMJl5!Z7n=?4-7Rfs"4_o_1o&]Dm>er
%2^i4:hs!n#+N2JrqdP<K6jY,nBf?GY5hgPGDFLORY?OldRukn`7@B=aGnA/fQ-_>IpS%d]/SF-NPX%hurV*%6MgV2oSaJoQ6Ho@6
%Pki!@s,1R^/al,:rrr.k"EG\bn(-[rU.f>l4hheECAch1]b_uVN_R1pqbHm["<hAXXT"j)8i)D"e-(rr03HgOANAKuc3eZKf3Arp
%\)YKp#i`=&0hDefeZOXO^HZ$MS%I^oroDu0nuc,SBL-rpZa0>ODg[u47-H@P+1n6bhnA\!\"/pK])U('"aJSoGB\-0=>4r@F%805
%FPuAKZolMojuPBOiSe8j3qRZ5GD\)t!%*TDS`=F+Qa-S7J,\oHMpEj5>d6/>h^<Z(C#l=0G/XldHc(:WFC]KPB5jgt]c,i(e]A@_
%Rk\(ul^8T?"'W/#ecu$n<ZCLthM?n!%RNG!-p#+oZk)Xn'RYQW3lctW%faj/pn.#iIia*)SC;e:dbnc]m"7;<G3hFSp`$Mqe_<0R
%Q1&6\$Jif:%j(rH"oc>N#u1a7HktZ_r0=+*:b_OC"u`QGeaBk>G:Fq]Jpu+*7d.T;"!'CS?O<!/AX3c[$!EB)M1Z<OX,9%9TZVkZ
%aNhRO%1Qb1\"Dm=!IT3E@t+Kr6:[a(HR;_h&"GaL7K]^@!1BP^Ua*kPCUf7(js0k@/f'G43>e-:OCI<Q0Lr5*=Md4P,FfHuF#$Df
%;D&;#E"S4WobZS:cp@^-^LHk!%^4a2$j?m8a[h:?KauCQ1(u%!R3Y;js35@mgIu8krh[(AB7aUH'8"Em?dmtceK=\u]mZplA>6hQ
%=Pu:2ajSLY`GVBKr]e.n*BX,F$4^cQ]/i=rP-`..fXCF^5n>*E6=35lo[;dbm?%_.8NV$+p?gEBS\+WAI_^OE\Pna:_6=m,>7_Rp
%%_12$cg7-ROScs2bjW^[hHB7+cjIR+E;a-<o+.to;%R&[r%sB6hCj*LO$AS0J+Lio#(Y*X0=+@hS,VX'R:fO=_QTC&qDoV3!_YgX
%K02)K1%KtsP=kcIM%0+L*Pf)LC=E*d&Asl3d!nqBrd.+^R\qc$#*ZH+<!(kOMpM_Rh2)O>f:>8!7rYqf@&HB6&Y7H\Ipfa`_#=44
%'i"B2Phi'q%#u[EVZ&78VY'O+2ZIQ?^6^;Cl[MTZIa<Nln$fC`pMo55Q@jd:j30>`T@!LIQNq$iF%T^2fCXH9Eu.u-9'?R,U1!Fn
%_H?Ti[PT5I"a]bQ7`'NHdM.cYg.9ulB67/?!TXt!ZT^A5=TN\0^rX//1c6]bp5Pl-O'fCU*B=7U[].';D%;LC,Zk!G1?s@K9Vgfm
%9*4@J&"51>FH'>EX.^cEh[#bjrINY.rkc.%qYE%o&=saWE\\VVLP)c7Z&1p4HOZQud<QcOcXs+hGDBI:KHuGfkRLKX7W2,.NF"29
%7CVuFfMKOs!rF.2(J0Ddj5h^#6Hp!>WA\/agp>gj3T"A"T$ceHN?3C&'nEAhW,MW'<u!`H;a/3_$h`9Vpe,'Yco:BPQRKJX7]eRD
%:tt1mSRXFo][jJ'j)@K2l?h;1a80)2l@Ik%"akWf[V5Ju2B:APE!'&<gbW4Np[MQ!FcEQW""*#eGs(cp5X#rsOYJOUe0aV'"QcM1
%q(H_.eKZ.S\D,[5@>;qeT7]tCAds]VeZoB94^o^DiSBp$:1oO2&#3M&R,qLE\n.<fjR+[Kp++RtHS)j=[*Hn`Ygjh(N,S2'MYI+t
%USl:Yf73A)5j>^miRC?bc`Z(CTINLupRr'X1k36W#UWMp)mIkYeHNsdlLI`tfk6\CC6e-WA7S4AlV@?_IeG2n,T?G4f2%at;U4#]
%b[)+YS_rW`N0$E'@2FLg6^J5ieDu9L;r/uVIu7jAhZX^q+6FW3nKSZ6ma$G%";Z',"Bb0XPLH'lIeRqt+S?!TbTCH_$PL;ATZs/s
%rB\bI]((36'bX3Ws3+A>bNm&HMotDgE!)uTflo"1^%ho+]-$:T=>j#3>PlD?<W_"!?9[,aVr,f_>hFX62-QrF3<JT'-mJm_9>@O6
%Bq,<cl*O*GjJ0f[%'1!of][[4<8k@-')46Qd"bouiZ5+"[<jd;p'q<o)oqY[o_bm_WDS_=/!`L>A0Mo37*\7qA<\hPX<F#h7$Hfi
%=<CZhnA$EDf`6a4]Hm(2n#Z<W2&X'NB@gQo^Q\-=T&GF*%X&]7]<L2&$GnV4?oBWnP=U`o$0D\T:E81CHb(6YZ4\&oO9UL3c8qd6
%)td^%_1Ejq18bY,G+9Li,lXXs3\tSs"iJ?<>tNsGN)kkV]RD[Sr0W%pK0eR?\(1*5W8hi==\,9YbqJ5GJ^<]U9cMt\nMt9tBltrA
%jQ;d7FOA>N^;W%eaGr+K^ol`[FZ\[U9lJ;PI3&)T+<R:`Ym,%IKrhQGp`8klF1[j=+;\bDl\T'-"F#M^-H3eq$f?nX)nfi*N?T,"
%\DR70PnEfAgH1uqpZP2B4'k6l*Z)JuP"Ta\@)uQonP+Cohq\,[+D!8^Z[AVc!;@6skhqj&I%?AnR,@9Y=tK53`YVHO]/.6(_`e5"
%Z^\22<VphC'Wd6j0Ddq[0H&rW7,;U+[P!=$UT=E44aa])%cqaLM,biNc6_,(7*l.][XHW>Vf)Rbp-Rq4$=#CaeoPITFalIhUh'j;
%4+/HlC9Nr-Hd<#Pjq6L?$".`=n.nt+2PDVhWW]CadM!9o0u88@l0g;0d'/)W%1YM#]^P/h)lKj21D0[Lk-O%7U\hdh5i5CIrWRu2
%!=q77q;tanAp.#!<r5d@0Or;i-@U?BiXc+dNf&;qB663.Vfn,DX'n)Z[=&)Ma#Mkd$<@Do2=01,?\$fm$aN(Y/&)P:f$(]k+6rcS
%b5aE:Oq1!4bLDEs)p`if!2=KBV#-EoJkB#o'Y%g<k6#YeX'n3]EK3Na.Lb*,H4TZD:!!30V]&o5@fW@85A,F,)qHB?5P.2#++YDT
%Wa@9J3>uQpd^rB6ns4f,0B&eLONUUm?N=$jKds##W=ee./P!(Wh:a5kMVoI3o`.5+/X/e/O=PaYX?F=bHim=9$kiMIV>lrp+IH?5
%gT0(8rek!@n**j@NF'`q71k&tds-+=WVY.[k>U^Q:q'I'q3="#\knVbE@cD16%GIs&4l5B5Dp]J"@Jc<TKogSQR5l1m`TgN%KuY)
%]W7.(Tfc$j>n9`MqkcbSTY-9o&HI]@#`&g-!MiM,Lr'Bi,B`a_NM<cMIX26L<Z;b;9j7Cr`qtp]NtZou_B56LkVns3'atp^UtP@U
%I]2Tmg':DeI0i;n'0h-TUI59@hh/S>Xi*n\9_,UQa'<o)@6d\$r^,H!c_fTBX^0pg^Mp55;so.X8&3CiN(q:*:C/a=ULen:DI?@-
%3<n'M96e4?P-UO'T8^M5B`%u*)=?rE"_27';BW.Lq&s6_6XQ/%I$gcDPOV<,]k-$b^#E;"q]o*_-QRU"XM'?RT9QHDEqpeC-N'kX
%n])tcNksrLA_eG-34,qqD?'Mjid-^[TOEjc&TQP1)MK8K+Q1o[7Xq'km>lYGT,uB1B;?QTLS!$_4[u2FF0<6*HG,;s.\Me)9TM^&
%WtTD)\;dRYH5XK1(`=)s[>hO^HQcQAPKtageuYSrp?6<P*6o#Di^*DqI(cl(B/`TZeP4k%l><FloqP'/h`MC(H^@EN=kGr3,u7D@
%e^BNHr_cLoLCJZWYL*76YJ7s5kYjAZ?<^P<LK>!%?s5uMjA,^FIUJQtQg1.(=no5R6XS$*I/huR%nihiCI-WHVp%;Ud;f<iLoH=0
%f-l#K=i"Hd:Y#@DqRVNuVKl`o(O\Fi^u_&#&q-nAYF9LSGN$I)!h+L0;i35Np_;OR?d#[thF^+=LG*EKC>iuIWHl_*VtFOV4I<>L
%jULhsUFKjhBCS05LpQlXShYSqkj(8*)UCS6]WRt>#5hB<1tS\un5hr9$FiZ:gB5eYp&"-kU`6;faApC,K"dKjC'hVY]>ga-i^L!I
%g0`9LkqrtG]m?<O/1,;Aop,KPm,=%U^g+eTjC*?cJX@2Z2n3[q5N8u,[n5`HJj'"sYN>1]0-s0pf!A>9?f,h5E'1h]B^`m<9OKjV
%K*@6&G[>S^\CS;9#CU5$Hbc2n!oe@h&KaEYiV3G8\oRQGa.!hJ?:Z7PSNOcWr0`>EN0P`<>2!!O]Aj%+QbL0oe';^?bN[eO7)0YA
%-D"Qd@bI=7G&H!I>2)^-8PeS_ZF6?N]sc?QNUir062H=Jp9C:!gjIZ+p@D,<ddniLFBH5t=PN_p=RN-'VI"JIE\(;=O!T6p=T.Qh
%NTS&c34:X,aUXXu#>)&)T'Bjfk8JZ46Z1fK,dM$3=3fXOolM[/r6j@[XN(ISIES4CiH)Aon*cn0.a7`c41pU'6(Ta7FBguBc/rg;
%'ppW09""G993eL<nj^C>CV=JSNA]75A1.h`#I&Bfek3i!,F6Vpof\<%`FGmk8ju\<M1ob/I`H*M7n5Z$Jor@8(KT\5_N?5c%nFED
%L)4V%0B$mD;?5hGA]!E^K)ri2_%Bdkm=$2u4hc4OY9h^VXR&?d!9.,Ll94tZd8t1=q+J;X[pl=coN=JXi^h2/bMe0:qd_[lSimQ:
%Ej85]8Hp\OhEDO6's&[K^$t<)lS]a-Q0e"oiFX8R4'bC4f.S0t_XY7n9/oe*8&H:leomEp(Jhqb?T,fLA?Zp5LZ_Q;>i%LI9C%^q
%Yfo<)_Fj*L&$*:G+&8D_+2XLIr%)&sHhgPLn*D$aKQf)XT>RW<)[iR-CY<[h2Y%^1/b^$uHLWj-hI#R)L%?\J8GFl&eA;B!kqRRu
%)iKH/b>LNO>1'Ej.=WUrc^Cj*nAXm.+adk)kJB0=gC:O6h:9%UIQ23#KqHNIHFS!8<XRH]\r5NnD5Rq_fZ#&h>\<]ImH!qUfKMmn
%KjUmIYMm;Y\%`L")oIA#2gr';S;o-RX>[6,(Lie<Ag-#<H<O^:N6MNt4_hki$fXhM?pQeZ=^BZRG4$,h<fF/7<:B[++k&D$/a*_#
%_F"5chc_G`m@Pr"e;f39Zdri'iI#TA?FXTTU-#KbYjba%5;#phY]P:LcRi8^0L7eK]jKt=Prr5^Y];?b(.u9ZaKi&)Ld\AfAL(TF
%p*2,<X[L*=4r.#L7R+3OZrrHcc<bB4g#I^KaF8un,DF>'G,0A,.R_E4g[W@-,e=W!=1\hPUM09Dk&[LBH/T6?@$sRK/CTFIQaQ"q
%Kp1?hilZT0Gqo#sf2uQA%pp*kn9K@X]mG-4gc=_U(Gf3;AT=?oiep=396'K<]t_7*R7Q`thJHL3(QDtdG-QL<fN;rRonSI]_-US"
%]K+c%AX8XcNXJLbiQBshHYdeiUk':cg,`Qs=\:LCdaDI^['=^p\/ej)abeNqotoX%l(QXT?)kS?daH>!;fSd@YI9e82+(JPC"?%G
%'?fe2Z61f:/glSDm;g@t<ahEX4mCsFq<4j3=Y;A2D_L"<mT#P^`Y+T0:%<D;PJ'X@&*)'\Q0&!VHmNZJ>ce8JpPG0[e'5LioV!k<
%jA/CUQ/^WFm`MB6g0Jt@2NCi'dWKB&?-#75%%=/$j:,16[_o/&\pCb6WD[bZqaDC(k4Hp!eKaRGX6!)jH1gUNW34\]\qS[8RZUVU
%l,/5=9%p@92_qXI<%\l.U:Us77!.lTgQ**`c!'c)+EJEKZGVGpCT!,WM8$D4EG[0%)I#ichaZ1mqs<Y&m_7%QgZKBt[F8^A=M)#d
%LUBat\6E`PpU=o?qscQ[NBZ7?35p?*D=0&V@bE-+*]m]S[UPRn=1t!+csM[D*%?`s@,Xe6A_'p),O'>GcQB?/`U2FQ>[Otk:TFB7
%qXo9!?`uZ`\b1-BGo9uQPah4<dS;>G-f\B84+=l%+1CHXquVc4ps\'\;7r;VCW)"S2bYE]^-,(ZbEZ*Pe```=&r.:(Q\gX;emcKU
%4PrrA%Q^_OK`cd>,CXf:fhcDqE?d9pJ(Q_P%eu$Qo7Mf-:e,Nc[J3R,<`c[\L-L_UR9e4eR=dd[_H]390:Bs3Pkc>%QsIk<(18#G
%4cXEagSJS9bo=k=HZ%"H>@B<GgY"5dE(dC#`c9``0lG%W[CF,u__lYGQIt54AkD,k$]u/fROrZ,8VfS#)=cs]0?WM]ra&l(nLoT/
%79I&^@:0s]@uuNRgKX6SE,Zh%&?aS"#D.67fGFD^@UG'Of*7sq.5-L(REUh=^2Xc#X79glHsL*CV7!`'Y,&9tqi[Q--qWO,d\BcU
%XgY$,om0bI]+ZGmNRi1ciV"<&YN1T^XsqtKp6sd?TjVq`EiEmBmrt&79Nk81FuGBrlS/"+7SZjOb*e#R28+Cb<DR[q/bR4j"NslT
%ersn#ok?1\08./imHu:(bsjX+Q++*(bi[nnbMEpgHhq>4]@,RfBC?4t[EF2fc%3]9DDA1(E@[<"Z*oOLC4=?&m\3phop_lHq!N9:
%HY9Grh**_8ea:D8`P_*2J]R;]miD+F[^27rS`@Vqr6F?I&Q41NY16h7NQ3j"h4<T_rU*7d:u!r#p$?S"CT+4lPJ)s?-M&aedcs^i
%<GOP*>57'jWU\!1V<)IDce@LPAR0Xc0cK;AXl`8[4WUu[LL$dDIRrordbS4e#0UNia(p&lisIl9dU7$UWE8dGZAVf%>#mgImUm&*
%&rGuRAOFXaT8lOSNTD02QWD\3\b!G;QF#/rfD<YO94-T3BW1d4ff[k:-\MD)3#UQ/'B@6Q?9W[oQJ&lWWZLQ@`hL.p7Qnu^B8aIc
%r`(2PZeo))4m1G?LHBc5)L]`"hc;Q/(Nlp*&05f3#<QNCG#0YImLL3Pk0DrNa_h&sqrZks&8DIcS>S4mX=CpL_Y,40*hP$K<j]8$
%j5Tdo.*@8tNcqLGk,<ZFECV\Hc1#^HIVp-@;XX8R;N)S;\$te2-]''ro-F4KE$r+&_tB5F>]Za_22k'\^O%mj4q8V<Vr@OLn5Rg&
%L!p]XFU=?oXiI7$g$2%h3SWY&jKf5*A,!'QI""oG0UL*YHQ-U_d_eY`>7N=A`QCeuGH4tBY+ClM#PH78>4j([T"[?]T&5c1Vrtba
%B(J?:fOcds)EUG*p#XuPAMd[*@$s[T\UK!QUF\!%p?F`M.r#%_jm","\p<u(4K;`.SegGRm/;4kqYldZDSh-.^I^<j]/SjEUj^_;
%716S@]t\`;a?MoEefH;&GL>empb&m`h;$gd\i]ZFqnt6@F2*!jXPBG?Q4!A0\KsHGL(nnm$/a5S/:$X\0l_Z6Hd&\!nmh?m&UTBB
%q;G8L_`",.D?j0O0jhIIG#K3D`_EI815>VaBk?n;=KGcW/rGqN>32ic*"OZ0R;/_IhH'$]]MXmDT3l?2<Mii5?ee+FiIDNbiq?+#
%Ch5NNlMUWs[=3.A268b&.K5auq#'_TC&.;0fsej.rj9#b-uQCF)QdVTB*ie0:$_F6H#%P_$Rd`XOc%]e9Be([Id'&Z\!uZ'X4Fr)
%C3$Z\dPY34\Po>I4_2h2_Gtr\S_>R$gCKg'crjLO=$!l,p9%?M@(,HF3AI`KpA%@n;;'XfEm.+N>:_p$FmW<+!1%n1Sp&'(bIk+,
%$hF\2QV-%?oH)WF]mb(&Y5Z0VYFapi)h!V).VU;hDsenT0e7KmHbB[M]@5*>H_AkC\sEjc>H/UUWt`:;5rckCPP(j,.[n&^l+]`G
%6C*QPk0^CjYduDb)nV/@eS-LSUd'g,]<^@25uGkkW!d3]#NU'$dG&pVlq6JpSFYP=,HD79Vq)C@,P:H[ra9l;Xo9G?[>/X8N:p3@
%SRr-jE;j/g"l2s2FsC&>ke+UBDZ$@p,_@/`$"<R=q)5[(\\5:_>cf+;b9uh%WjgSt,bI0W"$O<2\rs=W7"8&php4lVAEnP\k=F6"
%(@G4`;S?L=eoTW/Z34>D@@2N;-2Y@#/>b<I&o4JKokm"E5NF_1RFGglgnR[NKCnd7Bd'l1QmF-uGH0=a@cdF1>(tZf/1>0(V5/LF
%2or_gVhLW83n0[R53TtY&_iEl6TlqN?D_(5/!mJ6[a#jlhOSL\<pT=ql0Y$Bc6P#+?I]RQ]MEB%p%q^oT4l9NlUsTnFg"i$AMCmk
%VoP!0[XN]TUK[7==\gs\R>-+,Nc=&n3Ep&&YGj*E6HMWGF?fBdr*[F?j]>EbL=:/(APjts,9;BSPu/L;1@!%tXI?2IVlQ5?n@6$*
%/b.#ho^Vbk.TFaeN&b.t\N#C%TJSHnk`Zb)eI)hl1s9\PEmIp:8m2`1[<-1uG9u+(h$pbYC&&JU&5@!_1f/flg:XpkBq=N]419RE
%\H.EZ[P^r>-WtZ9CA+<M!M#?T9_jiaC.Tq^@=XHmU[?V,\s[HX`AXFK]!.FAjL6>"\TLn?[;ImP.n+XBN;X=B\u=F3\Otp(cb%Y/
%!g7`&[0RDgX`Q"_FqC]td`n^)G80\D<aaSWaAI,ufNQkDZ'ue<7RAIDn15CZQ=26NGl`DOmH@d"Vle.t+b@t@kFTb2gbkE'%DH:\
%4$0uq0"_"nm7_W4]sV!i3I\clF>8OG:=:=l#,'BL/dh=o$LI'O)1jUIHqXsHZ]CL0W4*p@2pt?!.q`3ug%r_ICX+V7(=Q1Cr,c^=
%qm`Dd)qBL?>c\u\AWB81TZQr[&K"KZa^%'s%UC\!jW2b"LSd#"dRs0*WR.g8CqZ(6@@"dC7PqOeft8S.68QM7\OSQ$OVY)0oMi$G
%3#@`JQb-?lMJ2Z.OPni=/8_Euj4kV#h9UDi.O&+S'hV21gV[#SgLAXUJXD*tH]1B?g6!k.C9p$)d)lTGiEL2[8^k_+.fHDS(`btl
%8)Z=6C#c95SuJU$]%i9W)Ud;5Y/5"WA^+P"SUnkrl!ct=ij,>`V`c**=Qd-P:HC8a_aHE_+rcOY+Au33YO+^Ej<8rIBBf^/_]Din
%HD]9-`h)fC3UESHde9Lr\MP^"HEgh;Cl]`j3a'=bH'7!!/t&rpkn\/Q1%jV(r>+:1\12l0+7++d.]OEA'TU4YZC119oo.G1,j[SP
%[m_nfamXRuD48T.2V@Y)'Ih^4D#</QJ?J`r#<n-&ZV-"[]tn3\Xd,IfZ5_BgW_On>YO"ncq8e"[?'Or8Sl8Cf@%",6PIklrd`noK
%a.0jp-*KT'6T%q^^+RkLYbAE4ihi&\<smk9[o]rC<d2e!GA?Js.pN\IZc60841m1g:tacPF:.N).a-!_RDNa-*=3m)bLsJ8nh:[h
%c?0">)K&qL^]AXQ0J0ObG*]-.!bdT^*oHHE#ci;qDS9<2#"G1jJr*hd`ced:*hRRYT[mfd&JmnZjm:sbIU(dQM,AX9;tIZQ+n4Tg
%e5El#^a,#SDEUACgm>1PK[`G%6S@e6T:oWTT[hdYr,R$Z6_AN>Z_Hp2@_>h*U5L[-HkuaF3mW.cYRER__-^R]UO+6=b(Gg'ZY<Y/
%*gF9G&\bP#qR$XMijr)=E(0Eb'P;X3Y^;di#/ea8m.tH$/Y,;9S85&50('gHdG[e^V>H*#K+TABPmTUNjM^mE<5UEY%UK^k[Y&3[
%;jHhZmb'0#JsloEY`%<50'*2A7p#c(.ALHHLlbQJ%/5"YU'&hFA::hXL4E39KbKM?/gF:3"N;=%%aTlT,JH(f:L)34d'^1"KFh6O
%_[CeVUSW%g$5cQ$_B$&gb614?6V-R)n8!Bk'-CN]rPE'&*XGbs1&='Z%S=6^cOsMMLuBdGdd[HZ/:':UI3l6/qEd_n[1H,%0dfns
%gh"QGN$Y%t_bh0(hK:3eGdP=C#i?g1p!t$!:/oE3jrI/Dk^-LEj-^[Z#4%8pS<--p=Bq-i,oc@_`+--K!r==/G;7@Faq?JMV!lbK
%#:G;;UE^$XW'V/(,)('Fn7*5]7/n.!E6D79Pj<L9*>K\F]Vec4Z0dKp1.M#cJ>>t23#kE/(,6=SLP]gS.=@/&]]j#_2;U*[#.YYW
%K@'_7dEd,$r(+qd=q[GsQsB@WS7o.-6!mi8DH&RnrW%3eC7_&C@qQ>g+6FB2GKd)V=6]s`LU)#aW'bZPiGi*lbHS"tdE_%'LQDQZ
%G/keq<k^Q[^as;CDe\YP1dYH4HjS<lFD4Bt*0f&QRnPOVb?\B?dngujoMQ`0Gkc<Gn\WQ^MTZj"@mQ7ho@9#*$MDqX>$?Ik21#.+
%o`rZJ[,fK$K!+Xg`<0ASN04mm"cZt50QJe[?5Ko&]<?g9RIm8RSTRQf>%s(:k@0.)e^:]TFIbCf/p1kCF;FNV7^>A[[f!.rAC<n*
%$#G[l#-):"/<80D98MZRlM2=##jr2JZ3S(NVt]?#`;TSGG'J:Yj5>*peD0A^Qoufc/P'Ts/FF-gV3?/-dQs:\S&#?3FO4j0I"#uT
%B'ZAndY:c7"YJ!4Ak6dSEsoHe`>_RF7d@HJ`>_fV66,4t>\PR3p>tj"A%bDPS+ZL'1M#K\/F[35$(7]=<jNBiEA*GqEpcikrp=NO
%V[c$p`WDGms%OMeAJ;-ZU32R)k4UNQZHr()/m7.thg'g$nmj&qLg=XOXI\aS,;7sg.LJ=>N>,/_0S"iEeaF`Q/+-mZ^oDbb2*D:7
%nJqf+@7!R/e9ZUC"YK0SNV?,?\DOmeWg1t0`@"QkBc^l:UfpHAHJDB(He3:$h2LJUjO:V%iFmVqdr=sI]rHsmqK/1.T?"1fL1jE,
%&Q?Wu22[,<nR)l3b=t)#RHIcfPP'_.[>:F?%%k$U[B3gOfNMY;\5hU)i?3PP9E@$&m:3%I0t^i@:6/$aH8\s%-Tms/QdI*0\N-`*
%RDNC/ldb^hm1Sia)9F`'_TCHUhW#j2YPSID0QEIt*lXc^.FpZB9qiu^6b:BVL[b\Ncu'5D8_2TI#)/LU`:KIZ4#OdYZr9GRYQ!e7
%e:P;he(F)BnOck2bGib(lNO53)rXZ*;"W70HaOZOc$#.@SVL3@%bn$Oc:!Ok-RX'Vr?7K6H4'WdQ@XS@=t98fO'T2Wg,r_6pj.=X
%fNQq/%uW)Eq:rJLJRC!pCbbclM?f+6j0#R,Dn`/%h6)7gQWY-M2.QYcW*g-Jah/E)^G'.md[%3S_(9kDN1J5*QL$sC=n;0d*\FfY
%orNDU`HJEQfA99u8TOt+3h?8'Dr-)lP1,-*#%d&80Uk&&`UOs8DTjS'$[O2\1cI](j5!ekb&1I$VC5)=cuuf9%J/NbEOG6X\<l#p
%h!*q/Lk7jXDP-9O,Itn#O?OQQ2o+acIP/&UeU@Bd:]$538W/^4"gtt+Q`ntPID>?C8m^aT^=c%J+AE*KJj]=aqR*\k-hddc#EDs3
%<Q.6=A9bGK27k4>S7"mM!k'%iR*-P:NtshljGR'4%)Hk+1&&b2m^)S,[[p^4O+s*jdVa-V@OjL*76/WCkG9MM=*6gsD]E+tj[':l
%UP_"BI=qOMC8r(OLKa4aj$%0?.!6+!jdJEq+i.l>"-f[e#!'l_\c0+lfGIt\gNdXgR%M9PBs5-KdlW=Q2Ums`pGp(X?`Z?05gi8M
%nMRJQg1k`r"C!>93H"sXhBIo>j69U6WFOU$2fGL_jN2OZZ`CBMM/tp:S?/77CS-5)CUM=N(^RC9Rs:5rDcZLh.5eMRemQrY-)**K
%qQ#lRSt*5/%<@u`)dU;s>ILS6[pV>O,OMS&H6#oqZ:q'dZ*o_iWMI7=8A!=#?KO4gZ0Q"^N`p7%e_=oSH<*]IQe^MYoH,8cLa:3D
%^3["f;"sGNJWh+dmI'?EW8"#QH+9g'Zd4b\5u)S:)9A#C[5YGB9cGP<m8e=Kkn,B?<j&`JdiH-S64d)<bDR\F0sZ`fBco0SQ[<rp
%<,j/U/`ZR0\Oq0b20fnrDmaV23BX#h]6SVWK%"4NFJD*kLJ,l\mHt'FfoP>7m2j]r<;oM9Y*VSdlUgSGRp)tram.Qc.QjQ^5\?I1
%%g8fq!/3alJSM/t]X(pfe$a*7b,F-.C29_oR;R/7j`fi@e'4/o6!Cd)38`W-'3<tbeY-T.>UTOjR:nHtQYn\Pa&&8dCqg!C.3$7H
%"+9trQn]\6o&3(2-:kF7p_\^mk]Lm<*F?'0+-X/EO)*EP>?r>eD&&T?8b:X,`l'1X:CY]aZL4P+id51Up'^S.l9Qq)=gOFD_GbAG
%f34^KgsmFo)gm&hH(<Qtb8q^BD3+m\4"\GE**Ze#PM4[k($Xg0"G63![&n+*BkaOsii>pGC[$g;C)*MZT_gP+=;0B*r'G#>N4.;m
%`G7WU$m%_(SVeIp>A'YT4\$_r%P3Ec!b:"c]Z^T35&72r;Llo$q12k69.dj;0K8[THs9MgGK1:Y><FD"93hSrbbb-*imTi<B9Z/+
%6kn?J^$qji9eJji)Z8>cD8d19GEtN;bBp2NI0UlTriN"cR[UIL50pA)/,.,YYTm4h$!g5Sr<CFGN&Z:b_(qiRRZ#b?G`F_C@ca8;
%$L:((DOdfed`PSR;6(]nfh[QT7/Pf`#e0S\#*Kdh2+i4>W:3pC]2q79RR81pTV11p$D\GWMW.lgPu:-*`(=I^Vn>+>\ui/)f-NtI
%KI*QR;D!8&Fjj<j(X?S\l/6rr-lcr&luMsbqSG=jrnBEhXk!*p_`cO'Aur26G7eqkKp17`[n^[1:0Mm;[hk8F?NQMHmlI?0`>cJ6
%-,4$4S#7W&XY`0'hI[m>0:QlaI0a:rFN5q?fol!*UF#TnXPbA7Fd>%f'dE+iS0f/3C2['m'mi//#3X^"#?kHJ][%Hkq1WoP[ernE
%Fq^%pj!t\Mjh!*QCb!d-cn]O\700:b#dW5mH\ID@J*cd&0>3W$I<jI&e&!dJ`<[1=^="$SZr[u]VhnY/rUNi[Ab3<.FOP@*@!,I>
%=*X>t>+!krg,NTb%@6To](EU[D;i1hf#_lXOW)Z^FmX;<Z&1YcVV5Y\cM:j-@.LdR>OP]!Ub1,;o(\n6e=Rel2UXG=]iF"1Y>*b`
%g)C7>@#HDV=CR`.&2(+dZh<Et6lI$T[e7[A@`,[6os"E(''ZUAabNt)?/UU"bD)($GXrGM6PEL$CmD[r7"pDnm.CVIc3VMao#=\0
%+2(k!*Zj+OB$IH5Kb:"A#nXH/?19+`)cEt^Z5ds;8YDYS.)>QNouFms>YhJhjj@k&?A_41L*B%O<4np?K'Rc12bNlu=".pOfk5<X
%niW?'_8]@_f6%\/jbP4<-%`>%AfA-_YI[b.Fd#>oTfq+%Pb_A]4j-k^7PhYgD,fUK5%j"qlM2Dt!SYu?:aN@EP)dDE5p'mPh'5[2
%7k3B:jer%d4Zh0_e^dYi6WW2L]qZT66nLpXc-<B#PI$4lLO5T<i9s:UEm;3ZARsZHKsV]I2fc<:p=\UiS[7F6_e+[PkLu>0G`m5V
%UJ4NCE6e`.3k_h!aK=?t__@TrHWPAF^E=ZV=YOm`+BuB3cbSmjp@k^3]2.'f\n:R8l^_6LE0P@2Mqd1;j*F,YSaPr5::(B=qsZK1
%YP1go#=to(V"8&4"&/E9?!h&BTt3EN>L+@Dlc`Sk/rH7K`G8bs5sep.aN9Ji+6q$.c^en.^5q5Be%:TXa7H2De5@pf%27P&mI2I&
%N2Q`fa^HJs*A0H&-i89ojjt#$ouH``jN)r@7-0s;-B@t9H-/6.oG)I>+#!6R**m8SZX<SKkU)UZm(IN^n]Ass"j$l,ilImEUt@kb
%`:ul1fiuo!;7po7-E*Ri(DGJS=@Dd7h&7j,Wg35qWbQ^JA*nt],lL5t`GLSkaRA6?k!ONpPr%tU<2MOO_Dgs?A=BWg\q_DrLgS[j
%;k*OEBt9E\Ze>6=HVQ*!;B'^9n/K=b(o"DA"HT@W3W.6kGNVsM]W@iS3SlkKeu9OFlLSQtnD-SR_PPqE'u!tq`R_&m=_9DF_'*.o
%B@^1`(YT6n%%LDm:qLk,j[\e!o\Z_5]7JGG"./fI9p]5CeVKjV7sc=<[p6NA+%bO5GnJqg)9TEl6bEqbh$]@#n:/Ig9(+q$MJf:B
%B(\[*EMX0Z[!O)mS2%Tc%nk+DHuB0LeWJ[mX,W_,2RE*!*V*Nf2c"q;]B@&7D$0UjE"4$V[[0EE&p=K)/[pND7D!-AHSBESi/^I^
%lPVq1k[*&,/NM\js)b_9p/=/?L6]J5d-]-:$uNcm5Y)/4O/Ib6kHdlB^>@Z8]kq$<;Am.9Pr5jml/t1H4"61Em5&5.;\L6E+7)_k
%$ekp$]<TQc[\)dH]/q(\_'aJ_+<>FQH@nHK?8M!+S`2.+B"VuNSD?Co+8GLETV!*S@fZ="'au%I*3k+iS];OioX?eZp3&^Z4tus0
%jH<"Dl"_%2e%Mj&I@+(&fbJ!n0RfJY(.^b7:%X:^Vi%*V4DL+qKJ4bH6ZiYYS;c:'iJl.R2%YpN\(lrJISDq;rnTY"24RNahcejf
%3rI*S^gHr)pBC2YGKQTrGh_qTNBmH9<W(3J"kb!r1PQ^fFr!RP(m2;N]C;e]O@K8]:3&NVUTL<J\;O_CWIhUe`oj@L7WosP)),&.
%EtLT!pl)AWfnXAJoD]V3TPr?M='G]R@$tA<i'XInpT-99nYL`EYci)3pW_[G!/+%m(msF)Y[-K1<pR*:GUQ#DI1pC)fc#8ol,-L@
%9.BbH_@J=-$T@Bh>PB!Uj84"LL-D9Xm@%C$8&4,-p.P@#mhgq5]/=p8b,B93"RORPJ-r1j*/D>O#LsTo:Z&<^N_9M)6HU!ACe1:=
%B.n8S:D,q/g\)$D%lRb3#b2!NVdi7<K1=cK8>Hcd755Q\4[eGPlcWVN,7BOX7\:t^(r=:6a?bdTC+FM_1"NJ-I]8W*!#5;6&gCX4
%lL5;((.%FajD9m3:OJ/ZHH=bnc/Bkd(mTe1mh:Gk3m=9`9Vbp8Qm#:6?XYB;U!\*50GJ<02LYLaiZrK7FNAhS!i?$qgV_tn]MD$#
%8&1j+%G!o'1PS;5*!G*J0bjhpOH8XX8":Y8,DPIA*ME[(9&`45HdfOs\jE'aEi3Ao=9(b'P;NZ8BId:<2G=X`kg<aolGL+srVGTA
%.2MJe>438dX/>Ibf&sA<=3tUjJK*Vqf$M@UR19[QeXk=iC@BCZ2g"c4G01L9U:oG!IMtZuCUu>Q(RFke?o6#uDG]IB<KIgS^!.uj
%o:!VD>OL)$S"WhA9JXDBgLbG$^?ksshT\4Wk2Rc[mUYs;l@43M?cHXbH.+_<]GMXeQIQPi.3VG#iJWMP(+T@[^X_s_1fW\s<YW(:
%pYITJT$N.S+Ugoq?HaWZT"@(C+nQi'Ha`I6aKPS.95E?ZhJXJ5A``.K?K<DRD$3Hp(<EQ\kIgQ24^J)LS1bDSjuYf#L@W)tf!(</
%&-t\SkEZDrd:RTA!p.kP,YtnBA6!j&_Qa+Z';aSf1h-ID!aO(UY/`DI*6R\8k&t@dXC4>]A-8So`Xub\hC*!;>r2bSmoX8\Ei<9k
%VYtH,\c%a$arUM?i5Puf^Unj\(m'LOHp-)XDhH8@irS='$Kp59A$G1Q`ID"hN@P*mci4V7o/BZ'\C=$h"^fU%.Gf-0#c_;20M;iW
%SLGI?U[;qd0J^W"e@n6GO:8VBhXSZ+a[TZ-h,kj!+866:fTV?0h#:UBas6'Vs,[%Xh0L.%4\u5@=;O#kQXtPN2PIFXbQ9s7=cjDT
%K+ATqMELa.b(?;-eE;;EJXQ6pYTWKC<p&(3>aF"Fc`dKA`9=/"n1kt`e:]BgH@irKBgrQN'jaQ^W[*9$SkH!pa2&ojK&TcF6WFuH
%8I:en@B?1oJ>Bu8"AVO-MTDMZ4:hLN!6,=:jO&(,!Z6_u-j*r_TTA.'N+tZn6j3QZ=9P<!p`r6aM]g(IM3/AaX!ANJ`QJU'!cP+O
%QW6$hMZVfa!hp[X_]]m-EG4Q?E\f\F!6,=7jcrZ4P5l\%:_4]o<D'L.$B+M7S7!3GJBVJWUI1aUdrTn-;MBcLTlkT[9ZWBUk*/h/
%+[NPni&JLkL]Y+5GRi4/As3jd!m0@^b7]2W5`l-2GYUM7apA6"6D=JjJd.mC^h?$!'bh2_=:No:O"(G:p^(-H-Nln-*9KM@+sa]C
%b9[i^Nd/YjSFC8;_^/hn_IM\\^qk:^AV!A^O6+_3OT/O$?nA7i#\^.\8.)jX-3V[/KI/n*TGc*R8R^Zk3^d"=LK"uUclir:&fO_N
%/=H_c"DI:,2\;Y+F&E8a;E;iZ`:H7/#_\'tW$+@CYV7dQ$Q:0E1-#]9`^<1d(S.8$5VO'CRF!.6L]NmR%&g8O9:4fRbbS_@AQ_!r
%!eVU_`l\LsS.I^UoKIco:eV2Z1Z0oo@7_S.#4%o`G_"#S^_25MoAkuYK<,4&:KD(,E_$`ZOj(iI%p=!RiB['e:dG5mZ3l@$?N@,1
%@br9GOVMQ7W%'R]2pZFoQ5.ah9+k$\MTEk-,^+`KaWU]Tl@#O<=Xh;/O:&8pAiRjNO(AufTQ4.8@+Gf0A;PBgbbEDb!E;A^5XRiq
%$5"$a6\%fROMGnhY[sWXP,#B>EXPtm"Md8+"Q>HD.$!M:j8n,2f+BjDMIRo%(M-/`Jd0O%5`Vim+@qk#0G>1V&M+VsE!R;sn]mrG
%AeuUEBr[ksU>j]`JW'aPAUtg6(f#(,!J;b0OZVJMM5Y)&)3>.?+Z[J]fUt6)ElRYWQjrV5.QC&)DMM^Wn.%Df/jdNe6&ZF9"$lr4
%A;KV-a9jXHcr'9?$5!8u0DH*Z3etK]aS:ji#`_"^QBUQ85nZQj&=a=5PSiQp(n,N%!5YtB7$\!p/..bLciur><>!R_Q9i\\-in'/
%C_J;GIh$08s04]fG;7PP.O+HT$68%FhnZ:cK'u7C8lPhcM1Wr%cCkoQ-t?8-UO\5CPiH;.KH1r@D[mPIZ0gL@"Ps_4i^BMJ-tJ0n
%.\WVFS*3S/JcNe68Jk8-DBTgJp9\Jk6_"6Wk"s"7d1[??M`B]=Rt-kU@.t*g*9UH^TaH<")Cs__`.PmXoois<kmT<]SqkC?*$U9<
%+?;7m*'PUO*'PX!:7ss*k_m>[*o%7jR)F7[S>h+84/b.LC(Ooe'np*V+sV47q1'6="CZra?jpRr-A$n>]S)/2a$IXB5l!e90U[54
%'X!O",aABF!.H&O`'Ak2OZH#?NqLJ6!&"Xu?NPBWWe=(Lk94i,8qIXXa-Ijci#oJD;%T7V+pA*/8VGS&%Y624/_I-J@LMB2Hr?K.
%CdQ'[7fp<]OB4f)"@WsE+YYp:*+C1+1/UrK'`qIa&jS2W@K;,"NYB[7!X!^q#_E3iX"k#-BJqsg4Lp?o'tHoS5Y/I'#"<USm(iQB
%9nR.k!BY`9!A[H`0:Iu2YT`PXK+RB[@LI-GQ&n37(5$Njr^m5<<>h29$drK!1*;U8p^*B<@#G[ujM?(g#dQ[*7juOL^j\*S;BSN2
%cl/"b0d7`t%RF!F`q!N)U5Y-]f_7[ta>1\:T`bKT'[6kK;M+"M9#?J,/4"4`n5X"])ajOW`/n&WAC*%HV/8aF@!WlHZ&fA+NjB^$
%7KO7m+^gchOeG%3MAUr"14TtV'qN;o-oenbX+`ARJCI>ZAYe-9%uNk:4[p;CMN6Vg_3G$:OK'Le@0;9YO[W04ORZc&!,!T,NmEF3
%bj_^o73l$oEDe8@GWKdR0J@*s#Zcg-!p%T4LcWg`#-Ee'Mh2#1M?(JK'uY?M+?0rC*s03:VF*?lE_f6L7$R-a>sWu\1*ElY8nM"`
%1sci#OT].(0SDCj8Gs8-nJ*B9:*5c*J"`U0"MOl6BHK8NjJ`iXfcUe.KaUO'#oQ07jLk[m)seV+P^(%gQrn@`.+gJa+!*L%*e?UC
%+e]1_UB-=lOubp=n0'K0Zr30F9u.\d%qJ%6KVZGZ1^P1RHpX*D&p%TZ`]P_X5TD%/iTkH%$p9i-('OrZE>"]JeKcX(0M5D79GDm6
%'p?iJaD'QLM\(X<N'&99&'H/`$jdZ(7/]TIS1#X,)H#;O!!,n<N[Pg(<0eh#!DO>&Qbe!/%Y9&/j:K`XHq6P#.mq>!S>6_hK?OJF
%&NQ#aiG(a=nKBS26m`lTJd!>T"G\d4"=L2n=dC=7BJq8QUsM1O4%=j#=,8#=!h?\M36;mp+'-B30rXk4+](MFN2n&]O!U#E+SI>\
%#X^?KbZWj=)A$O]j9D;#6O>`5j!5Hl\C(p\![*cE#65^*NeCO\![]+L6&VH;KX;UK!D\1T]n8#46kTYnd+nZYg"Wl;Z6\[\o7m)P
%3GFR-lluA^I41qp5]At,84YO6jK6m4d+L"^>8$f,o&h`7];foI^4NLbQCSaP,!>e@m'YGOgCnJ#m[NRLAGc:LgfQ@]h0(1>*q"ih
%=N:=WR!Nq#[V9ZCc:i_tf?F'Lg1N3kY,=#7cS]0X9VqX<.UU&0[l7P5a+b>Cp?LBR`?+g9#Mh&E@tJQt-TL8CAT#JpgUc0?o:Dd)
%m:ii'aUY-;$nl1I/npgK5Iq@a=PrQ"S\Xk@#0q%XCJSopbZ17@_j![?*hVD.pJEo*UYkfQBmq>9PI?I@h0VK#:$r=q5MA$#5s'ET
%c=4;MI=JcXSZ;Rp;q\;UK<j;da(au]/.5/+oA^&0jk3upDTa5N348>6F8!>V+)asH3Ur(_Ps&`Jb+nu:3*k6qn)IC=05gf29RaM7
%P<Jt2gkX\aF*lLffb`\pm:@@5A]+7dI/;:(`t!\UmG3n4r%b$R-dBA;LJH(0]e>p6dg.8i87H&*jZt\[T%%q!12\oRc!\We,[[(*
%o6&FH@3;c2\di!*,Pg0hJ[afIS,o\dX*o<^&1kRSJ=0]1qg;06:@)5<4`[%e1rL8MO8O<hH#T+`\G'Vh#?0?gVk861r.j3u%=%@7
%]Lld3+c'`)pi>+RW;'hV)SE!^Ip:Z6`CAUnKjeF\h90@+4"auiM\4!Z20dD/9?*MN#0/1\C0)k^18[BZAe@&l:D\cle&!QYiD(5B
%l%tC>RlHZN.?54BBs-EI3mQSjs/L+214"(h-9"aPO+P%gFdGG4YC>;L4#:[J_hMM6_7\qh?_DYZ^Q%]%VN^P<_mf)9:NX?qe;f<L
%PB1Dl7sKK<kPSimdhG0Rh>K)Q4Mp@>k;lD&3($:m$3b?Y5ki[?>ql6C]e"Dl9U*rQB0_tl2MmfN<Lpf.Dg%V]puOF$?OaKU4oZEt
%OA6an64Mu3Mi,:81S/OBUOhE@drsbD9[^HfF^3W+50ei<NlBL$gs/M&e!aV?lU[QYg`("pSe^<s+-@&l*r/8:\^1.9'7`2LiQ)kp
%?kAj9>YjjnGLGl>#/IKRft,VJ$Hnq@*0h??.,2l$>6Cb9_.A.^\q_ppcPZM;YK,3k[ms_dcilj@\rKIg`h[9Z:\oYR_dXN1(/,qQ
%/$(Vj>lg4(4od5UZ/]0\]^%BuY*l7+_<]s"pBP-eX[JXd1>U#s@+g$HmmQ%c_fX\$m18YQO.ji%cn1R_*jpE.]sc+tl[H`SC>kuV
%f5'saDkN*TWAf>2%YD^]M8L*BJll\nMr3P13[`dnY&l[n93MRp!;1JOQG"#VpB^[G4mdhO<5uDj'?=)I&-!GKJH,&p"i0j9SC,Zk
%YYp,`5f+aH"JBqll\+l6Xcd.(f)Cok#\I-X,HNp!/e;n[VHBFT8=bs?49bn7qDV0;m?rS,V-*#B.$Ps9fY7$bg=+]0gHH;F*pC2l
%47D#9p2*rHQ'oQfRR\oc^=UJu`@\/#>c-u'IYO%_(qRBeG:15MeA/f.n(nhKklIl"0Q5N]:YQWpI3@c;-5#Ek>E9ciAq<F2o=!DC
%hNMn?Fo)p"d8e:<1udY\oa:BBit)Fg/pc1.g'sB^5OipF>BkPm8DL)L@MAQ.7#s>#4Rlaq&)kc'_K/k,^%T.TFqflAQ^Pq!(P\Dl
%hA[fE93b]n5;>@Gm!WRp_VTK2Pq@L#6jFV&0M6p]!Jg>2(5ktX5\mgWYe>g.oUh"j@:+ib!785MHY4T,oYU!uM)/T-r*fS*F"bB%
%Y\Wl)@Y%'4'u@4q#W'aO#A@QSBm\dK[duC!.2/5<o;YI(4#<7"O&m&bi@g@Dg#J)=]+q5,(\N`sFH7e6H?ruMkE-^q^!Y/dOESRP
%?]cMb966';oC>2'qmHn-H-?0"Wn:6/I.#;3mJ1<FN@D5?5.nb:FAd6o3Z-J4$JN\:'35spFaP@1d6;s`6e2:n!mKK:6A.8O[9@i9
%:%s)u1d&9/bgF/ukPF]+O-ki.\t.]+*F@I+(\j#3p5@pgDTgmHQPNV="2I+``&8@g;LZQ$0iX]+Xo\mHdR`\3.?S(S_F+AcKXCYh
%!\M^mgUQ]hZBm8V3g*F[Y2Nu*[NU#_;JV8_'rZp3kRUeeSfTcYH4k6KS,o>o^@C7?R72<AJ[OldmeJEX=4gMY"dpe/7sKKr(MA!M
%h@`rUrjE1;Fdr(=HV4'^aZ+fr]'"=R(AjZrNm4t*:Vn2o?&tXBo/%,'!Sl"VEG(m:2T,:\/&!A&D!^j@[QM#tiUd4eR68r$7!l![
%!hQ4b<X\6M1N>E87%Sd"$.r^U070fZ^qT9"\*KQ]Z-#d&mdk.2kp8fliXkN<3qsZKZJklT`*/rN]sPc@[827!S(J,r^/`odG_\Rt
%805F=++\c&lmVaBnL)N\ma'UM-?;Lil1nng9ZimeI=8\AXdt#ha?">.hGIn_\_^#um+nqcQ3!eJc6,n:-9iGWG=d7VP1OJ>,Ho(!
%jH6l^Y=Ia#NsP'DiQd3c/T+AJAdSQ;&YYjR4)rp0PR6JNA:$<H%!b*D#*B>8;/CZ*".crnD,DE:!QlFd@!h7R]6e[OADDt=%P'GU
%cBK&(P^NP]p_)rt8PRL6IWkO8AB2(Ec)hL0&^O%`UUaSf<bRM-_62ir^KlBgQ(N$V96+ep)J7G3JMZ]&cY(PGnbKc6Vci*)#eofR
%T(s6)OlG#2gcjP+3"p"sW=0]sFdE_SEJr>ad,uQ[*9@V,hE1KJ+RXWsmu^SAVORcq$M0CE7l-rhaF8]ZloDc:\&P2%'8==6W.@S.
%Im&;bqu:Q#Ksd5#*^Lc%i4$E\)4c(_=44e$W78!S^4Y1oo[>c$o8!ZeRUX<[F-3'_>B5-P1(OHh2^!lg\Y"CXf[j53>M6RhS`*;C
%*XhSDaA_;Q-p8--2GJ,VfL91'pJ,H`ecA9K2Op7]+9\\@h3NN1hTGjhls9\;N?^FDp=U6"'XK5rT6njDBnI\8s"V,9+;<1bS.T!e
%HUYn^SDp:k%9Wc7'b"B<jmi970`ttQ\dg2_dO#j!J@BgchEZ@B4YX9)i,u68-(MLnp?SatE<`Or.D)IuC1CERXh&M%!Nj('YSWi'
%%d;c2hfj>?MBZESjpNMa#HofFZV-JKQAiF$m4PBOHOfP2/A.bmn%$JSP4FdYHr%f=nogAdhH*jq?^$34)9"7-O)M"NpOpFI1NCNE
%>gaU!j[7l;-^XJJ4V)U*fY",)^<$>e-]2g+Ug'GK4e6O`3IHsY\0NeX9ltcR&!9%S3_p5j`ZL+UN6FUESEI&b$f#m>C3eWX\MAun
%s719u`0a_XR7sPgo$L5gjiIYo=SMXJI+`/D1Ci=Jn3[+l%q(.@ju?cHSaJtb)TYS[fbQ:l!+!Y'XujjISh!rh21G4?cgjEH<9%o)
%emlomXF.)=)C?*47!f*)R_?,G+YgCH#.e<<jUdc/NBe_$%LNGIG@Qf$LY..?Aa]>rbh366)C0AGj5Tb/flO5Va5etsZX4G`"Ac5.
%^^ipkS"*oUXM@hZ]Gp+/M>uM6@$ebSdYlB_YS/2l*9dY3L&t:*U9U"Fe!.Vgg,>tI-.JR;#9Xr<>P9iSIjS^j_9]u56m@_t#]6Ra
%rP8L-hZ_Tb#D=?]T_,o`L7>b5iUMSNe)?XPJAb>.97(S%)\3LhB5*4o^Cm7I$hCm0I64rfD*i5j7@M"JU'M.p;nn"k[6NS81@*od
%@:][VUfn,0KG]);,E'5?Va.)Mm/tE'Bq/6#$@CJP_NtRF.`/fGbgLM-!qoBo"n$d^^?sbcEpn"N$oZhWf4jED/RH"YWd(HNrUcIS
%@Z1#MU5\$[7\,KOKalES'RH/@_Ku*hM),.qAVh)_#ENg!_sO8j6g8p9Qt1L7<26DTE$0*GfZ)ugihd8k-'*G^]r$Foh]^28@GuG(
%^[nUhhAn6B;e6X0pQ<Q&^<F#nnCDim"t[^Fr.lb>l=CRIDASEWb/Qu*]mK@d!LMlG+4nS0OY]$adjfqTklFfm/DEP'3u:pPhC<F1
%SZ0<?Nk"JJH!MQO"c^=m(e>cs!$l-3A=3(1">>EB7u=kq_*ubB([Gcc^12Vf1[(<.#AW1`Ie:^p`kFuaF3.;<Lla_i\E./UR2(^p
%I?DUg6AVt7I9aqU'uP"FA3]WN8dePASr:j3S+Q0C6Hjc8/O"oEF:WEF+fWCN_)p^;j<aL<?i]m&XE%'/DF3P0h]he-,IN;^RnWF$
%]ELK-0QL?A)J>9>Vho5Zm4o,8DJnLI7X%Go8P*a>jtWi\,#bgu&jM0c*3%(!*KTI%k+&G8ndlHTT<I!kr!)(!@"VC'aD(jK-4_Q9
%/P)@-j^+U$!]>c(7[f(rb%AB*%p:`BLaS,4=E=;BD80i8'-dEJH2B/nn6`/7(BWEXB_MZRmm>d@o(t%-^^FH;_CN81&Dq2ZG<Y&P
%pirK&hKb>e_W;^go?Q6@,C3\[TQ_11Kl)(.,ed+l%p&<1C\YBkKR]\&?V&mXZ+8b*h\U>.Kgl!XJb5ifYKiI*gL"/$i+]E)s'ii,
%':&EPM((>-M^<5Sb5@%YjdYUJ0mmeOAfs`7&sM.$En'L$,.rlJXiRb*d0Kt2OiV/(=cB/[^ESbHRH>;LqMil"c@!@qUT_Vq0,VcK
%4QS)eq8.Nnn>!`@;GS?1/*VUK"`WM[foqZI2/+g=lLqNu5WD6fKBqH._%'/%q;rc/g;>4>0%EB%OMb$qOO8\73"@<Ues?8Cn1*N2
%f%Rmu&DkN`^G6Gjbf)Muj#[eB$bk\U=S^7Vr.:bjTl[r15-O%o01_lTWp,5#HD.KJ#d/@uloS_N6E@dS+)_k8$]jjN\%L-E0BC@s
%a0S<hncluR'uRPA.g0UiC!C_BRe+(&-0"F?&aK*]ZhNgm_.<+7MJr&'2KSCp9$0OTDXVhllc@9;afnQ#lH-r\?Q+I!1XLcY3X5[j
%."K>p)<F#V@9/BK`Xrn0&+gYmJfh;-C0`BMAiO.,rf1Li#$XGT;n>2Kg]/e=N!B#1ahT7n`4%,Ygk.(Bibpo.$S3VW">qFjgABP%
%)PmBX",PPWDSMg\=NeM\jWb6jlGEF1(P:P/@0JNf1sQ8d<H?8N>t0K,X*m.oEVG6VnZ-EQ/@/`TJ0:tP'uP_\1!![f"&SR+&T7#[
%l3dk3VUX7'bo)Q+W3rEgMbB?;B?.U-_3+O5,WcjO4gfQhLIoT7]M4ef<5\kDB#M89aP6CkfY35%l+k^hq^CRQ.6_d5]Nb&bqQ,>V
%n%Snn9X_Zu%TfOd0JT5;LT+S1h*/(;/<AksnZE*%)+:GC%A6S%N0NGHS@\T8qg8$m<p$BL,O0Oecn,h;9F373W97Z;Yd.<1DBF@f
%V0>sF-"CEB^c08#DLf[E[E<\5eF(*sb>'&`V_+XG7S^.q=E9tr85;^9%2(#pT)`DHH3iKH!GQRY]k'CS!;n5@i?%U\PVhrDlsT2Q
%G+@\mc=mHlc[b"[j&NK6:srf-F`JN4ll27C%PtnT,J55Zn1j^p+Gml?A`/'tF_#bLAY&+km@in6[`>JJ/281_-Y@;%?ku"$XId*Q
%mMWFq0??V3GW$P7p4>BYRYkD`cD5Ca.&T)p#J;@EP3!LuZ=&0-.C`V@=.]31Hs#[Q5a3%c,n:BpM4>(aJlE1EWC]],i`_b6!Q*=B
%0,>r-`rb#3X+?Z?h;r/$8a"'_fRo`_],uBjmdl5T`q0?MbM'[*+7*'_OB9ofjnDEg5)df"fC%HT_X7gL`e)(WV-^FY3K"]i_guGU
%]*;m_`W7dU`\urbe+TJmMme4EHeSs7m4?uYPGPKe.0nSUiB_5D9RKOeKnjBFoEbmg3UXLD_@dW9?0C8,]B6='heDX04-ui+cr8O&
%YNNAS:`^F-QU=0'i`>)J-DB5c0RAPI1p*[*Sn!*^EU+oT[)G>QZ<b=?">gG+fATpR[DBF"V?tgHHCcK>Fa+(:e?nWA+pE=3c^QP2
%j^HelHbY>WZ^r:TJG?;\fZg"5k51X<Yf"+'VSsX?R,oFu!3RYT[[C,\[R9]YM4_'r9>mrtotG:)4&2gS!Q4Sc;BEqs:r6F12=iqM
%n?;ieJG\uaY7W:V\_G?mVk[,j.Xc/4a.+/sd)N.qgL#FO`sams.+_[]68LrDKoM'antB<1@%qMUnNZ"/Je;C>S_*+8AbZEaHl`9G
%6C*t>6T(/.lijb8np^c^dfjHo)6]%\f.ur=9I[,]19JG\9(,7QM"?ISgr%b>BAe&U%(94AR$7ZNRo0D2UAUo22jfh&Fr"n,G0WIK
%87m1rrZAjoe)q[elRBA0%r.sl=NW?kqj,s8PG`9+&u2%U)0p&!e5,fd;Z$jn(aR)n.^_FU5Y-W$E(LN/;t,nn8Yrs^jd7-6Ea/^-
%Ns*q*N)+WuVq]sbriAo9_MS]FHSZS3k=)RM>708^7duA=E]CdbV.W!f=Sn>JahYW>33/0Q"2btr[bAp(+j%n'L@MXk".).929*<c
%?_rEmbksJ=V>l6D.U+#ec-1pHea7.Aa<n"pM')JgD%dkF"*":fAc9@#2qN;uNeb>C&@fckG@%FAH!@J5`YbdZiJSQ*S+!,HGb^%-
%MsUk[SF=]rhqLJDGrPW-LulOu/=pAs7dVoBa#UL)d!`FC)@,2hrC'e6oZ?fm75VrH;`JUoZ*ugg.r9RMC%<V(.oSSS3=o!QdX*Q&
%WDo`cr1Q-44b$R;dd*2Qq=.eM!/d,Kdq6XI8GM3F"s>'4N2(V')\6rFNobY'13kZk%SBt4jqj%_]ZDF5gq_EOCb:ci#_rtU>WVR:
%"!oZrV_oI!.;l&.8#+elCAI4Sq90QB_'4m&_#`fe@H@AVCf[e;_)%N.RCnla[t+If\T)2=/TAbKPr!Auntl?>lR6CS2#>n-n@_:"
%)kOBtbVhg7a'SgaHHoKh\<AdV-cdse,dfMi1fk1(5tV:%db+8kgE*+'Q2Iq(,S'O@UBNG)a+4`=/39;/.:oe!OS>=bWrum*fV#Rj
%.P\CSn2d0i&^A:cMO4bs\e\Wid!l+Z/-<6s@=YHtA>mLt[o-Y(M2\#n98nl'Ta$@E1&Ub`X,O5')A\mB;?t?%>0,X[YO??.[5e\Z
%5+UUX`SLgX1JTaCSK)`)k]duj!RY5ul1LK\qdSGN*+FV7Z01$]BC=BtT(@Ie;-gNk7;Oq'fD@a">"KpX2Sk*-b]L=]V=h/Ze6jMB
%A<_4Q%nXSIUUAB,GnN]XrZ][c52-t#7,/r:<8pA,'iSl66\=:Y.KFAa#hj/*,4OXd:N_jY+Q5?JM8Bi3%6+r=D:]Pn0#aqY8XMsT
%c',_'4hTl"LpO$kjZaB0(&=L^e9fjOrt[+f8?FYh1pJ]J!Q2cPjlKo#i6(62=pRXLhT?cTn\+6R:#b]1#*t?*2osMg!m$#`>($0X
%9Mn/0V+]b,lV5eU:eR0bM1]H1@-\!LK%VtKJ>W<K._u:T^B,J2n[ceT=blK$Tq]1lUG@rk`tHJ!$tuN.Q#.V,`$O%9/E.[VW'0[h
%EVM[\E'<.rYIQ<O`?iYt!>p88P9\_@U^^4HpWTB!U92327qMhkJ>>\;$'C$B>*EdX6*dR]5+p)7'r?Hg`\E!X63@!#ku?AMC<o1B
%A?>feCEr`iH$e\8?=.8KFa:-S]g7X(!(M<1iBMUi<g/@:!D*u8g2g.*d8l8l2jRhWcI7]d/hkt"K_#_^O??.p!;U"00ChV=DNt'0
%'&`BS[ar'<32aS,0c@oZ0Y9)ZCfaD&MXhsH1=+\f:RN62WaJEBDPVbHAE,?#+6H@]VG'_BTk<b4H_2)#M2B#Vk$)]C.G8+O9#5_^
%-<%B&Z=7'2/QC_89uA98+fQl&7TCr=Rro3]OZoe8b;`k2e!#Co^[V>t@h22O4-_o/#ra263:eQi4Qil;ZgunNjr)sH8NYU`5"[b^
%(H^/^&ipkd2U4M,6cjcYQ^Y2&AVUb]LIH]S\jVeAWp,E:F`MGdpFSY#>>0Qd>765GI`ZL:VU]L[l"Bld;;reThf&3RL)Fmqa^k[U
%YW1pC*]blHZh4G:J9?05@ZAN03FDBF3j;:*Z!i(t;oujK#>MAPeB2'dbXIP6l]!ZiftFukr*g\k0Kl4O\?4;+S/m[q-;]OJk*/cn
%)^WATm?m8-dR#89qXE0/0hY9s1P.Kl+-.i3ES(`WfofdHR^_3*p<roJkUG%)PBEg''X^8(#*"o6peVfdWT*`'PjM!JpjM>Z]dH/c
%b#T:ZDaQ,WBpHQ>kHG(^2NqB0`-A@69BjkFgG_RFTLYiT>8`pqHVMitV4J`cN%W(F59mE3[7]^^96Dgp]%&jT(IW[K3;$<[FfE6h
%Q>?F?3K%7e!Il.rNaM)V0@bdN1;rp5`Cj4kXetPjqff"N]U'7;CC]50'5n&5n!/p"HH9m\jR3=XqV.1KT+O*`>!$u.0YA,E^/Z[i
%.N5KJIFmJnpBn`P-/k]]n5>WuY@,#-3aN.;YEb<dZXLSuG5i!:>7pY,<;^'$ra'u$.8dk3Z<rLGh^daU"n_8;p6TgtHeJCp]`0/W
%E*!ElQPI#d&)9S\/n,#$ab)7S&UkHl\4A4,.d1f9p2ALV?WQRo>2F`B!P#*4r;L9`rhW`r;Gr"J]tY9G^R+M@;=jf?%WIUC\CBpG
%rj?Xa]3`KG<T=J_NAm,_Miu+Tn`->PEmkQ0l#utGA,&\_s%u_i[IX?'*oJXqE75c9W"N@s$f5G)hPCdd-2k=$s*&a=]8XNoDr=oc
%i!\q(?R62b3XG2+$,?M,A8L,@@kJBM?V/ZC.Tpg)[eWMrk9cJc/u\@oA$b(S5Q!0a:s?9L'FQo>g=":qWS6dqLiTR;)Gto`+nJo&
%75Y9<(>%iX!pWY]*MDD`8(l[?/=[,!kAo$-Xl%;PQ)ZX<@i6<)E!j6]@&=>J!r%p^ZntR<)mbF"iHNa5!a?_"f).B/-<#lHpnF_Y
%pK46+e1gk1&n@5BcX/*Lq(B^h`4ZCt9D6)s&m00\Sf50<_c%'/(ZoZ#mWi6H!9[NFq0OgbRh=W;d"2c%1C2XN/HWp[,8V!J4@p6?
%Y1)rqMI\"U""U[jp9(2!#K7o62`Z[VMI#d4Y[gnldpX9`/dHO]>)@9'X`/lZ5BQ!14Gh0cT(ot@4-*G(=$1S"!I.0>#_BJ>5?pK\
%g:R8aY<qfLPr6Xc0ZB^2'H(p:H]%^RNP,/c+2/@V]uZ4?`(@^?0tkZ!^2'J"pl\^5/EP/[9F!2<9]W&a4QEd"`uPD!JgP[G!;fSO
%nO!IS`aj*Gkp0X=IR+\8<d:l*iTe2m!1Ss_S-0f4*nDl)X00&eMgJ@Vg/jN8<[#;m!U_c/<2F_QVeT<MQ[#)In\9Ld9qI#CA@A?8
%8jNKerZ2L$"DfU@=5c\hXbCuRPcT7B](IQ"a*4)PRMqDt!-MI`ejIAgN%-#b7(k-09@A_%$1gdn%Pf05F`o8;A#'rbhL@i2ZII+`
%PGndg5&8T0!;_ZFg*di(Qb!-`af$n9o)WMh5@o9NI[26`'L0Fp0H4j!M.*[VO?rI4T(IW*/\($%%uWNB85hN/.Mk,sI%U3X*p%(E
%pd9Vs-UlV.0KX@_8rC!?!O&?tPA"I+]t9*AEc=uj9'bSmeT`!_HKnTmV%%(7m_]W9Mn8.%gtU$<aQi=VVVtP]r!a0q8[Ku3g:^\\
%8V2#)^(443U4bX%VG`40^-f-\->Q3<(W>2aBZTWd`tp&_X4He/&]4L@choS$;K"nI(V/]ZXk.e[qqgD]ag;,!b33IZ'fC^s?n"B9
%meJ-)@/gNL?nE(J_a=_5rkW#;Oc(6UCpkbn:9W9GmAq2Vjl(jr>d0Q/eDWfIoVe!U+IJ@6XYI69GH8A]ZhQ]?ThefC"DoIYRs\].
%geUWYPjJ^mJXKZ3W(FooYoUU5-e*t>AsJQ6-!S+=EQD?^CZp"<QQ&WO@KuNd2)9&.r@dmsNtY]6P87+FEOH27Jhmp1.L1Nm.(?lD
%LA`!BSP?\M`3<d]*!U/-?sH,[$W"=*3Xr4-o^[4a"@V)q5lV>>d_f&H+Z/rVORBVZDM?%A0H;fAZSL=s!FN6RbYO&ZpetQEZV(8[
%BS)KT(@f<\]sf*ps/u^[(Q%I9&GB1_fl)2tn"So&EV&(?2uO,RqI_K;7^8u2cWW\OCK8%feiq$bT[-h6nsC^d,T)9n(!4l@/_Dse
%@`sch_3a:#N88^FeouPoWsn>h/bW7;fdgug&&EG4f=1eF^]*rArNC_G])bc$#H13nXq&M)o6qRYPB]P5?s:+f'LKWOgeTh"Sls/e
%F.c#uDihYSiL0#0Waih8"6TG&#nHaUVIVtM'S1XhJd:/&g(7l.iIGq0<*-tR2*),@^T-&&Ck*nu:</M6IPNFd&$Jfg\slCe4nSYc
%^tel2Fm]qA\;n?h7RmP1X$flo9Cs3%AirsLd%iKN;[1,ac"R4a4ofr]=?'$.I#LC@c5Qgb=\D,B^VRf-"9.q6`[8U'qs4-RA8m(p
%pSW:"VJ6V?#7)4[7.@@].!Gd8*jC\;H!J95H7!d-K/ZOtpHYUXi?.U-85j4C^(8\oV4b\(/3!Z.Efe^"jZ[\GK%O9<qj#S;-I1H[
%8u2$(Go/2:L/+6f,:?f:Z.Gr[6p_%;g1`N@U$3]eD`pX9=>^B_Z5g%`X!'SjC''+I1F5mq34-l>oJTIL*:S4q%l.f2Ba3/)ROLN1
%:[6Ntd/s;.jD3bHrF&6_-7K&Q16u;M'&9RNB3;-j,gX&_PSTPh=-\kY^Z@28'bi%*\rYi#,e#,E'K32_nWY.Ol`P6p80NQf(V&SY
%[<&m[<f1u,5S\X#XQ9cH0UcN517AJdeR7TI`ZSkp8iY,mE>5h((B95Z*.Wb"9BW(!dj31@,nE1pN%A&;?79LA&$E=MdlaD1et,q5
%\b\!u#=TKJ1*L-a/TN-9)?ET)=tAs)+1PAmo_S&2(gc3R!VG@>WqhfC_"7E8Gqm?0CA$9/1!!`P/Pr`78b[*Aho'p!6TkC5\=-j5
%S]R&D>N3%8bU$bbq4\1HVeN0R3ods"UN8U).[_U%*&]+)p;R]'Vq[T2W="9nP%10;Pf"deac696\j#%b<*q3BQTLD%iP\]i2utJ@
%f;aJRgT1ui3V_,-[*u;pc60A7f]Pl>(_bMI810=1=[44_?_o"[k5$cF6N;p?0omcZ2[N1D!VGo-f8QAu8XU^hlGbg$E0r1$Z$&<n
%e[$KYGiBE:WU5S*\D8)I62Au?NGqRbFu',19K`UO,8Bg((rdf(]>Ri;<EX6+<["9/ebsmA?VI[J=ujV:)mD^i]MdD@_[p>u`ql>4
%Jo]HeIG),PKMW>YYp76lmMmj4#u3!]Vt)K:[(!#5DmY^r4NWXqc&oD^E]!Kdj3ZUBJl@%QdZ>]0+/Ke6lTkRJeDin>@'<TnRADA7
%([QPP'-F5DNDMtGL+=k0Q-j"g\VEaPe;=tuC'Ja<b_)(!Wfk=Hk8%?d&:&gm.GZ[S3Yg8:3q'EMql=AUKMQJ?=af:"5;D.DO.`PP
%SOE)a+(H]#ZMu0+Fc@U(Aa7?"OdIfCbX9-V:IP1ckjhOfUu7P_Q*iMtU>XO:[DHR<Z\:W:a\#o"rUnqBj*k),Eg!(sSrJF"6u;4&
%=I[G?_pE.FjjWM2[DE)`XPt])[@AFVnZD8"X]RC!`47fo!pNt$VfpNgT@C_WHD'1.4'A7*0XC`:1rRePI=r[8pdmZjk?!)FDEC-r
%dW&.#MD:CIc<FCFAm+KKqkUZ^3[V$^#GmS"K_PAubK;VMmDZhBL`anQ#6[7clC;7fNlAa=EoFp/&]n+`6HZ%--Un%51A3rX7k)Kp
%m*Z;@O,oGia')RqN+>b?"cdFsgVQtL6amcfSe[tS6hV&FYf_hF6;IYE:h%8U7T,?fPT%$==Q9?nCb3TB>*)8GU"s348ZfY<8'F#E
%`*saZ)])blTA`lujYiG?+j\R=)_T7C<^bTMDU/WC6!S4#AA"2B_uJ$]Y"'g-Uo4h)LU13;:A=CeL!\;lE,Is*JGOjZQdnE*_(Q(\
%>XIV&2?K7k*)IhPl,7V[Rp0nP@XBdGaUfBs^mVVRB:Q,5k>Hd8s'[MJdI_[LE`BaI,f>6*"iI:brpkD;YmuN=:&!:KE=rL:VL`RN
%AWY6,8(Vn+.AQ*W'WQL]N]Kh6\h*LM/Zd+(C)tb@G#iG#6/\A1Z^UQ?OjAo2&-$,&2o*6U:hDd_H(LKfO8et0e%E+9W8H]1W4f3D
%X9*!3*O2t2;RA:2"lNpgQcXB-WB]EZ&\&DF(c_d_r,kCbOkmn("02)s;$B#.F6h/_[WMYrnjF$)[tTYFJ/I"6QkI8lB4m)[H*3fc
%G!r*+.8,K*\Pt]I=LG]8f@k!defG;rc1/E7c_UWCpI46$/9Djn<U4P!D4DCmGVD=LC)ZVCoCI7jC[CV>]"a^tT@LYVMS8\LO)r%h
%qc#N[j*4n]ks/Im(0a=jdcW:W/qM04+>>4P+772F(_3\a@KZ?RaBg+I_ni4G&D*Jd7X<^/eAFr]T@f?rHW)$ilZTe$I%5pA+/k2a
%*-!DU@c:KE4B\>ZRfC"ToF-d_<'N`1d@L1QetBN7^sJMPN6Z'N5!-4MC3h<3*%.Oq@J,DI=(1B6Bb\*kRE'6]3a^Hn.)G(>4aheE
%r9a'rh`m1$@Ycd]JEu_GgkkO.)99#AS28QQ%m08oVKc]:7F*isb#>%nX(Hi<%ld0Zp"Y7,=Z^ud<@O(jqtUO)-*1Ur=^U,T,bI/'
%*def+/E7Om_^WY,hrDjmhhY:s)tng?Y^/"`MSY0TrO<Kd;-e0IXRe6Crnl"AG<[#rAsDde@UgKp<qlTi'2q9\5`M4)OXJ1k:jJF,
%R6%8GJeK!J,2<aZ]eIuE7B7Ic\J>H3`(rk<W/R;r]<$$Q/9YhG\Vfn=V1*KfIWUU_9j.QaA'I1-2N4uoAu6r21#%+^mebhRG?V9c
%r-#3j;i$MNs':gDB:(_"CeWlG/D(X,$KkUc;YIAT0Gf'\EZ6Xi"Zpb8/"fN+Gu2fV3gZ:p7^^6!-pc3;#YhLrBah%_8ID?TV,K0`
%UrOXh*7(>.`XH;#E.i[C(?*j3e!$l47H.*R2%EC5i8BI@FaOVU\'k/il)`kD.o6L&q:)qE_e`AgWRSDlq/>d>V[N`ed5+uERYFiF
%1t.__D!t.5b8N=<N%!096mcsNM&E<_X/F#`Z!As#H(qU,`#M/qD!@2O;:b?K5*o/0;.0/IiR-\PWZbPs<hSGtQRFh@AlNbuO*dKK
%0['nPOiN]E)DuB"Ho\VL78hc#?FZL4M&Z\R$$Q*8l$.AK7LQ5j#U]coeI6sVcV$2Cl8IWkq-Y>g1<)#aC2?Jj..Q.c;(3`8gr1]6
%9PT.Hai:I'B][`Y(2BLi`,uD_f`m(r\fSu/p!hYH*0Xq\m!2m.IIt]AMm'[p6\uAuLh(C]S3HTRJ':NWOH6Sq:6p6$q&Eo^G>LK;
%=ccS<):\B*iE_+>d&B7Z7&K`j;,BM-!&UW&k>;DsMBg*lgc'huZ<fJF]'KNei/Hh%K%mI6LBm_lp6IbF?sA[EIQPDeHQVG(pN!W5
%kekhYk(!V:)>\bHFX%AK$a(C3bQmt*!?)cqRdN>Xd"ZfBb9D3R2DT@<o4eO2+!LWsr@3`=cGcepICkG`li>TN=Xq,'1`ns%@TM`]
%/JtAg?3V:Ij=L^GQliOr'O?<$em_ROI]/:ie=\bGIV)7a3GSsK$UG*?;S:-FPW0]T\Jbd^.,6_,Y0!:GOoIRj5h)l,G5*t&2;1id
%aH3$s'oS^TCQ:8g7N0oKADIqW0Ue^o.6Jq1=*__%O4jUO4OOG"@:<qKhS`6T*Yk?uHGo_b=*nA_@t)c1,](]&3Z[APhW6Ha;cZV4
%lA.8V6_8%o(UsILgTgF#W_u\*gD^@\>H7"qBQMI?o4d8WaX7Q"O"Tt6*U*Qege4a#O4.>"ioea+Oir@5$;Gp,%&mXAoQr>HrAIN5
%2d9?_gBM!\K[1Csrm7)XT.[Kh;)JM&&)reimQ+:.JTDh0GQr6%FGKQ\/X%bh&skTYi)5^dO4*BfDtAg0iP;!-5[tachK6Xe&Kr!R
%8.Y>Hj9jk5%k)N)mcrd/o7?UY26C]\#N.rZJrEB@0?M(Y:t8^#7H<tl$5lD@a#P>T)K51%9X!t2<Wg$hqE1_V0cE<7>2_el^>mZm
%#O#Ms#Qt/[ee-s:^_DW5r;A;Jk,nV'h.5@SR"P:gQp%Yhct-I@P[dBM+S(jYe/bd)^fl5GnU/)7b\r**?U]2U<8`?K]R^Juh<BYi
%]n9Eo7Z;8ZjWso?7?"td2"M)_o/!HaAER%hk:;pu#Xp=r<Pb*dO679S0T#6PdI6&Yro3tW4MLF!UO7-\07NZ-IsuP"Dr1I>/@Yfn
%pF,&7Na.4&>BFr&_Cp`@*Ep3cnF&X@"X(RSkSKojrGaJfgF]kG#D!]4qZ;`6&bHI\rf5$KL"fr7r_"0f*OEJ3g[>FC=$'ArnS0Y_
%aHaWLNRa[?%kT"bKAc'Wn#WA#7Tkm_$n8<<fHXqkHjp%?irBG,PXNk\iW[V2jcB5q.M>NM\V@aok_:]=d#nqT/Q)$#\VGcAkY!(7
%/AX_;Fb)]/:aXK%c3-h^S3nP?CNJH349N>>98`M,b]]>U64%*[&IEf-*o[I.Oi?)I:GOZ>X</mR9dFuYCAYQWfb`$4$BAIYoF'/t
%L#ao6r<;,oJ^daXqgs+N_=7njI_jaQ!p-3F%RGV58Xh%7I(4)@-TOMeBni514LJPOGCTE+?JLc.'P\i4oYdtH2*cEGdcPefD0Gb`
%*AGYo+b&C8#u6g6M.4Z&o0Xp/7h!USWC3"MAHH3?qFjS^9OEhtP*Ua]1EXTEAm!15T[]Ci%Z)%:I=\$GE0b])jpKl@r`AL\?k0Xp
%eSM3g2.*o73WiN>;p/)NnQH6S6i)n*QSfM@PfTEf5T([n%E[PN@A%WmI=0V@LH#TT6c`,CR5HqK.Uc:lk\^'-$"Ij:]MriU@WsrR
%7h'Khh0dl+M@LJ7=CXh^/a;OO^DF%?UQ/bb19!'1&VU]+Oed%+\^;`<8uc*Hl4Q,Dp<%ibBcOF=#>iFo'^!F.KM.A;Wq<(3#LWsS
%;!cV+E3SW$^S.C`;+^/!_7rs02MXc3$[%7nm>7rD5!otA7kBkr"Jn_mRHt??,'k7*L+qp0^>=4JkI3FFJ'AAWZ:FXGdj5lN8Juo@
%(]?4BH:tU$;_6O"bU$WfT%A6`s1INN^./"WdfPls_)l3-"h&p&!8LKVmjWr`hVn1LQUKMR3piM_]-lfkc/RQcIJ:,,Hg^ATNV,`S
%lTH\?9:igEfe/]&0B^f2!r\9o^Vsr+]S;W-\.Bc81l4;dif^XXA2aEF"*3t6^EcI$$gTH;PtU9$M\OE?-KgQZ\Yb'5q4h/[l'dUC
%A?F]e>;rY`Q5"R>**gr#f/1Dl=`I/NF@-s!D6p'p^V^ZCGk+Hp?e[<[rc3[58<&B#9T,F)/Qfpf?oKEYOnS!5BE'LF]oVXcT&JHO
%hg+F%:G6?JSIpL+m'b6-It\#;Lt'C[=*)R"eof(dKrF0c?eeSH<-\LVV72h]<Cmm3p.Xe__K"U+ce6?<nBe_ScW#u+XJPPV0Bup;
%9LcfEP^]0KXT4<,F:R]JWUQ130t[,;C3f'EX%&_$g1">J\nWWP]5L?1HO/rk:8MSt4Tuf)+Y5V)U?u#GX\?ZJAbpY>Lu=[T8I]W5
%B3&,-0-thVJsC)3J8mh9!jX9"\f;^YRH=%S`BDNh)V=R!Teb]$HcigU'DMGY@OIKVqTk?ls!?:rSr^Wtcu5?GpN6<jD\')D%cA?W
%^`1_rNX*;9I,D,WnUP0=J>p)n2e;T9^Ktp6)kQqeqHe0f)aO60UL)p1$S)%6gjY+Lrdk8[i8Q8iHqL\/",0-ed9:r*cj\'hjE@:8
%B!E$2)1s%nd:Kac.mc?1TM=#U&BkA:EU36R0QYhs(oDs!4jceF2:kL/;LYeUKj^ZO"C9^1b^LkC7LMd#WmuhA1hE/u69Qn=;^d88
%r==dbV.b(J3LI7/,i1;=KQ8TTF0TmsP"?k8CKW5pT.GQgISsQ@#HHFCcC:lFhd/3%h.dnVX_gu+1gcU0T%ZhPJsbr#:YQfPr,bga
%Y?[ic1#']QHX4APEYcpK)B69Sn0J.Sc0^'l;YP:>7%<d]pea*prHP)i*/L#)odh?l&&"-B$CatY*ga"K%cD!C=k+J1`s,n<:Mm(U
%5urJ$nlJpm8LNd=O!bP)[`1<);9Et(-pQjqd"pu3Co"Qq=Yups9((l;E>kY"M,FZ!.9$5EfMAcWPi"$aZ`&u'7_R9/#G;^n:O,F>
%+JrD1&iA7>RW5p(Aog/_Y7oua%r9Qg08ol"`=^mOCoU'E$_Je0oPr>)Z-d.n27&#637TXV31_mlm>[2hbVA0<r2O\E:Y,Qn5"<"B
%KLZUq=pT:%>$[X6PQA*@+fF%0aJC?%+3AFOT+jhk%j[pf9hKd5o4'&QW?Deg1u,&M9Eb%.L#,GoEo0)d!ZrZJFVH!(8:l+b.uJ=]
%OOeYj%V49/!/N8]2QE:t5U4@rW<T<p%@p%&9Q$Ma'f%U/qN!;*jk<AEVY_!J"LTC#0[Wa&>T@1\G?'BUBMM]%][Mp8a@FKr^g-Si
%9.4<RcA'Zr<UWm_KM=]Bc*.u>.s<bT_s#4V"K92F=I,gD!^NmkF,J7t`&"DMKag:Oa:6jA(f:\(eRsZP`/tPtk8[*3[qR:MZlJp&
%UQP$ZfRR$f9R]Eifu5?bo1%9Z4[CirdEB8I3dIYL,p8Qiqkp*ZlAd(a=J-(5(&d'*5U52`1ML-H*!+mR*&.8N&o4K?C=A0bl629E
%r.EMW;toiFEbNb3f)\=bN^$gL8[g-02h0tj2_m8AK[OIWZeH3R:H`Zu\6MQgfdM<g)L.4c0j00h(B.XJMJUXcYL])42S?p7&;3Z4
%57Ht:qi]P\XK3iS9QcY#PifeX-r_k)*0W'>9"$41H#8V$5O5Gl[8cQ#Mbrl%$DNobEi_g;+Gp=jS<S]ma0GI^1mAQI<fVJ*"U.Ji
%n-aJ5L^/$bYsL*cU$s+*fe#H*h!",HO*$TtSM*'^RIg\[ZPW8r5WU]TraU&CVfmJDBg_[m5uVWISfC<tODkc.%+mQmQ#MqHj];9j
%ARrEJj0j<MWA7.,>XK6fMO,G"J@4omP]h"eiHGD(I?Ma6k>8lT"?EFuR`gailu0U$)f!+Z`2F0PFXu/KUVHZ^5:(X0b`MX1_P;<n
%[Y'c10TB"I;B!`rXVu[!M2t3I+[0?MA$UMA&K]A^<mGX0OFl+"J$#`WN53oqees*F?gYn9&HpEuekROq6](7J@GO%$;lN4s?ib\\
%9a$n?*KhhZcaIT*KH!4R;,TAV99+.IFY/l=SqHrn(sf@6)1&d.!?354Lcq"ANGXu5O/c-T)JspNDPSRmU$4D'03\n#&-K!#`2StM
%NKEt1D]:E\SVM0<<n#NN&EqE?p_ID#:U'9KY40?[Kbn_p@fK6jq*k!Dj92c*Ctd#*TOd/RW4G)%8[1=Ne=n,A+hXB4rs=iF6MXu]
%<9UC8)K#[H_M/TKW8!+:>q[/N(\q.1BHtWe3E?.q1VlO@RW:T*5kph;ApX:?D0_<=,?TOHlLnlnCp>P*fpp*<CZV3@4A:!9I[Lp7
%IhtONd$0pJ9[3uBddi_q.e5.hLl5/*2l8%W*6gt]BF$H9AGfM?,)*BN]#)@-TM>eq!hjuNlBlm@7#GZGZ+&I[pBaG$RD-@)?q'!)
%\0EkO$m2ohA+)fU-A9'G@67,<4q*-6VBrs\i:aq4TNNaLW,YV39Z:b0Y"-`TS"\dqXELsY>U;W#CiQh@0N%L3R"g!rmPh_nCI\9U
%:nZXegW,mAe[H80DlX+Q%SJ2R,&5t]PV\IE;%nipnj*R0/5Y(t=f#F26lG]ti#KN&@/M(>lN0WO%jm=mTg1kBY1$(<pj&m&*1#X:
%Fn/`ni^fsmJ+39(ajUlK)P;X"K0rA`#qSh9)lnY;W3p6?eAuXT&V#e39\*#R,dg!N9mrTWG'%lM)>K&,_YY/B/8Uio_+2'4SCSkt
%4.k@C$qk`NfQY@SDdk'*Z#Qmb)KSqnfFJZM#O2VfkuQQg,6++VE^CS%el%%#XJs6HS1REW`?p?o8?+=Y(LVN)`B-9Ll)UR\F.0:J
%&%k]:Y-\SupoC4#[`(%$To[r9euqU^VIXlj2DrqU0b(QkJO3&Z?CY9D3Qhk(>OD?rIXklO5F3Y'n##Y%+IapT+[gaKO1_X,dk'r%
%H^pNH3mu9idj19\WEG;SMET*]b&Eh:4/2F^Uc"nES+)p(%`5O`+l%^HMb44>mZf'>#LZ"(ac@7?6P:b$!4i2=(s.K4a;QbFi]>4f
%=*m37:WRT+,%m*djGnp=XidN;eaQI@aQD-P`X+3uHaibh%6=!pT[p+MTb]$'(T_sHU!GhcKnctg`1W"PYCOc\o+HPWZ]M%bNp0*0
%dkZ"jl)qH\=jr#+<&\AK).5FoQE!qa?98oT7UQABbpDPQGr)4\1qQ0<O7>A].u(Hc.eMePRW<>A$RdE54^uos?ruSsf&O2]3ir(3
%PW>1*1"8YGfaMiX>1T[JaMD;`lDNT_KmFg#KP5o'EesRgLF_.io.TC[Z`GC[j;G`9miPQN3!m,c.rCcfmWT<s"8RcVKl1#$d1%;1
%$@*`>EM\c4VR9nA59uk%g,$\)F\V5J?Aj^#Z/Pk`9-HHk9ZXT!$MTW%!P2QJpSV+VmHD(`C`>tc2=^r*7[dLt1^YYX[AOk$=qFKj
%H1[73+R5(sSd<-In&W)EC4UG\i7!+O:hR$-oikX2@amT[HV5r$p7\+<+U,C`92LtINZ*p4`!fL)A,tV53Q-7)eK7]h3,KNBCC^Lh
%5CB"Qc6?A@4^;hhUPU*,1@ttphd0t$7R4@AP"0)<4uXfO2"ffC^aKo['tk]OfM/'U5`hc'km'_G&-W7:d:deD^69HY4es@L7+L4;
%#+4TqabN9rX\]MRGXc?Be^WM2&/hO_RX$JOcQ=MI;%pls?9S*qJM)pkM0g$F+I'+soFqGr*OCLPWFBZM)Dp57;@E,AMlpK#5i>(^
%G1Ypk;]+)!L?!T:N_poK`#KHT4B&4Wnd##4/D]kH^TcTd>\u.+&eu672eF^PP"Ps_+Mhr=>?Sqor.R^_d\f-0,OP\-cF:/2ijWUC
%2.B<FJM#VT.'8]f)6_'*2SRl7j1Z%P=D&2nRi-otBP'&[k]aI%9R=u/G9.4,)W--N5:`a%m#bh3L&UT++dH$R4J>jbF@@bn846C=
%S^T_p70M``"WsXN'Rmp@L=sW1$$-L>i)Hj38k6rPK;9^]fBn\Dk4sN>)j"Lr@4'JA3@\`4N&nHqjY:kbLBED?7lbuMO^o!9'Z">]
%#/DCd-X<ZDBY1uJ(tc7V8sW^Mj[fFALtYo%\`1gZNa3!s7jf4r2_-^JQ:Rl8HLR6JH#.S@:Fi]Q9%s9.PWY1D)FbIa'1_TdhjC$"
%&q\PY]DP.9Q]e'PcCP+imjDFb4L/N-Gfr,V^u^%FKUKKl?D4H`-[L>pe%msC3#jBt1HM96#=^gq7N40M^fl-Z@cGMD4;EG8Ac(%,
%>q1;cG]n1\"FdI/Z%MFYG1^-!9W?E/C%',_[R].Q3kcZtTQ5iQ5PTL&e?Tomkp1pcXJb7cAfn`7RSGFqEQ)f,Kfk;U0iYO2H(hu8
%:d+3YRQRqJm.+jdh8]URGcBmg?POoGnti1M=4E"%T(E.N_oI^J^\jXXDE^=Q,?4Bpc-RP]NHE7TP?ot,IpQ?%Xi[JR>.*k;@Y#7(
%\g18%hfV=WAOHcX7>D'%>uel[:r]5L?]lAOFp+M17nJI/U\;d]rs4Rk#LScb91V$_D,AKM>cCZF*MQgM&iTPn?p7tU1D@ItDo^3L
%%Aj9M1(b`'K5B=_qNf3!KRYer#6EimEIY?'g!^H_1!U+e6]+Wc;nA.X$-n/;E0!Pdg[kLgJdRa(FX'FP#<TE4Y/O&P\'JlbKR't,
%Hp%YPRIc_`_#kdQBF^/D#=U/=Q+HWZ2'5;CNY!iMfH%R)mcP)Mibd@6ppY^Jq[p0D#p32J@)/1$q``Cc"ahR^imm]k=u]oa+KKjJ
%X_:AUF:dXRm3=u-cd<Jb*aq_bs5F.$/d5M9'j?X!gB7c$cSbM`>8N4kI[n&E'!-u7$?1,tZPQ]Bl4&oV_9EprSYR$S^m'6p"+_W_
%^q@#0jt[ZXR/&H*4nt=q=@bp*GuB_,PPQ-YIs;9:ahsFf)sBQZFrQRIH(nSHgmu-c[`G7UoIdU)T.lnH<1)%1I!eIMQ.umnO+<9`
%G,Ff^"]5.BV,NEO%29MYiKQtk=YrM'6$&B)`ZRF[K98>4DoJ"c(0O7rUL?s+PJSjI9"l_eL5=sA&`nVhNW]Nn<cmA=O;T(lMiM((
%&!&bU$fS*$fq%?'=e]hqICjRQp'093Xeq<(U\2IF2XVU;[mU8/+4RBgGTA8Bb5o^WSL8&*KF1?T4WR'L"t;RC!,eI'qMI.<6!*[L
%HLptNVV&8rTA%iK]Q4Acmmo#o7UYI7G(,rAZQ]a-[,4+2a!::I`(+,cdZE$:H=WoEeNd$63`.CiZB1cde5%q"Qo'Ykc7-WpQfOmS
%h#-=4E^q(]3U6=$mb(h8Eqs]q4I1tIQZ`]pUH,ILWV!*gNk=$,q)hL9oX(.X;'h[#O69NLC9Im:`)%O;ceb\*krESr*n=,W8%:(P
%f<_6&)XWgd'?ts5'tL'kB'^OkEAibWVmh+Ub`\-9?/Eb?jJKkCqZMk'`Zlr%XP!2*]*pd/!uFZQ*$k@&@8^64;mnhc[GTQuW$Si:
%D([Qkq-e%0>l7F,*B$&EKqd1?dUY07ON*?L>2Ioh9QX=q(phfc$Al2h\mkL.af*j>cM0RK*V\`"V`-;mglGUMWk.?YbW._)QB2U*
%R!c.o9[Ri28!>Y)S`Ec5<)RIuaZ?"08V31P<$YO6?G2k`BkrC(K2C2\ZchUAn(?kpJ4IXVT0&#JcV>M-F)3/EZ*<tArELi>Fh(Mc
%3W?&/450D6R-00tEZ'1)Ms3^M<BE8VT"'*U9V\'3?7fj[h;u8Ya]PM"4J5?kPL%>pN$J[s:J3E'>b<YX31W))4m<HRB153OQQsuQ
%8EmC<jtRGT""Msm:S>`LSrYYboXS*p(LrrdiVnd7XoD#ERP7,lr],8[6S=/"q8s$,=GZ6bg0NPFf'SZjAEIq4_>3*8doZB+_M;Zt
%>LmM?4>g^>&GL:GrI!nNV+Y"4Hh.eE[*l5#2mUb(oQ[5-^<MlgBP&_T!u,MIkgait`t\SgE>fH_2U<IWPZUJ$>s7>"(H1I"[aADS
%"_W1R!r+nV\A67QJRe"V7q:@R,O)'[kBJS"n-8X[mdaWGi6G3HDr^R)mR=0D]EoG9FWAlqaj^;JllE"V(;;k\e7K6:Hu-f#Zqkti
%dm#Lh2ALp=p%38_69DD@_PMKFPA3=O.*-5NT1>XKJ-p.r?p6/rI(^NfF6d16o\YQ+Y9F!SkR$%?#At.X?`4ii+ae7V8%9usgdDs]
%iX?VpJW'097A&Kg+bP^6_+bj,CDDQUEi3be;MZ`#dsj3"*"ZhZosT<HI5OjsIRm^0FJ`8I#4NF';3UcB+a0<PLQ]Y-CXCb4IN2)6
%(-)eL5*/kQ]aq_`Y]??]X,Ia7&4+,Iq`KW_oQoglnD-Bq2:Y]6PoD#3:LqcJM==gb*=^ujeVBn]<L1U%Q5m3Vj:ROdh<c"9m()93
%gX_983b7_j`Z3]D!3[nC(F[>:7#a)^3G;@fhE\%5V!K3bcli'bfR'_jQd:C9^S=i8*(Zr14.D]k`nc5HE$p2NXiT=$8ZoEIDi[DS
%<`s#0Y!\c?Sl;G2=eR86N`I@BpjCpfm>\3k>+FgKUWlYh.uY`rQij>)9U4138n?)mfkgagnjsu;-bl7dbS+pgFIK3*5h0U1>F9#8
%0U3s%:N#5/ZDL-M2bM,MPal[<.HLW.*ek%ol";IEgCp/X<5irJ3ShhSQlEES[NBR>ihn^'=@#!LP%V#4>!7[e8VjZE,'e6]1T@UU
%LK,+=-b96O.jjqUi^%Lo4r<ma2jp?-J"t'_OqdaE,_b*^LFrp&2t<Qu6S.D%'qCn)^?F\6A9G$^4;Y,kMknZ8l9A@DTUVV$=40J)
%,"5jp)-pd6mK,uK6:t>XT"ELu72"eloq7f$cqTSbWa*Ko]Z?]b_4#SEPaeDi(ZHq]R?j>2b?ao)V@dn"P5.Ffk,qPPY%7.#kfp_'
%c<Ws'-Fn1tkBRm6\Z>\AM#uLdK5SO\=,!'#%aA"Xjs"X5Y'tHDaZ2cgG=Q!H.f2WtkYneCl\l+I[;h'WgIN\u9_P"p;T@-83)#)G
%ifU@\MUk,D$$.F@K@NVRn[k.&rRIO\NS^;A7QT"C8C+F$cm&P27POg=le^n\V&ir<4Q+QMg]a,Y_)=_(Z7b)h1nDJK48mUu_S^3;
%#jJ)b,c22S%jd!-J7PHF,b_?.cm;0G,tRS%UnHt0dSHW8c,5!-c2)0NHqFp7gSSCEmp;SJ>&rQPSV"0:^$9;Q`W2k,_^E2Uf3;KR
%W\XuEUKu^_YEiH]bhBqZ>;PL;2M9`HCV4M#e$AG;\*:FXLU=qT;Hdjq1O.P"6U7T?,IghN)7[*9`5D%2q2[0TDf\88H'_bYbL#L(
%2ao1Z!E)IKd]>&(/BB=E\_-VJ2L_p0]LI_[ekk<*PX;WFP?BX2$3R.mMQXK79I1d*OSU=NosqNJbf40s=c&81AH@k?/I/35B:N"W
%[c)9YWFOG%Po/5W`Pe;N"h_M:pQ18r`+2;T1>-pWJk9RZQBY[$!>'$9/Q/q@$L^JADBTMq_.`"Cb%Z%P/Y+/i'0!18?NMh:%)UhX
%CZuShifaDX#gm+H16+rfI4PmC6?A>r<$C"9.)s(t4T!#6CaYaRls7f6]f">SZ#[<2pkbs=.D'dM+iZgje4F8eksl;i!Bn4,iPd&4
%4E8J&\Rs%KKH_<!kELH\7?ch67sj>$jFcL%Zde\"d4m$(1M]D0YVW[q^-l*Uq9X9^C/EpAmaC'ARt.qcY'V!ALLq1J&u^q5Zod=%
%m)G@/)OLOfK'3t@,(Sp@D7s0uAkDr/i!":DE'-*WE+$M#K.W430]F`Al8@,e/mY%RI:Yng#mAFLa[.J.:l%l!_jAY#8j3l/gI)XN
%Vk!7PbF;*W63sh!3L<h7mi]VF3nrmq6u"fWYUU1r_"#;`5C@!Bpt,#Z/rtD:"`D\"8bM0BELXBXd,Ts82$PTgIgUT-MEppP*J&oC
%9,^Me&%$qe\[0?@MG%S`q*6,EKguVn5EX5P@iH#m41TJq=j/5b-\BGBH[qK)T5F68GJ?2):hS6`ei*K#D#3_&%6%AYp:=lVhWGa9
%J9mV`a@sT:7sSem?8kT84e`?0BJ.Tink*j98d\n)5E18C(Aq'[C.Q9a&%3Q^47cmPg(HH/ep9NfqH0,RYTtPT/kLdj,]RP4EtB?B
%0^RQ%+9!-q;.R^WDGR4ZHWZ.$P(,'p[E$j*dXgkB)/A:an;E4Zo`OK*?&]9Oqp]dld)+8H$%e'h5a8A"A&7bl/.i=/_\?kf._8nB
%BMaF''7\2qY5!_I//6EhA^,XKK$/SnP8");O;@5E3F5mJrFD7.Z,!1egGn[_T<0+7\C44BM/uQ!AXIFq'+"]mCRXMhm7B"bR1ISZ
%MR0IVdN`LT.5a[NV/&;fD&hsc,G6_mHsXH>#2fgL0Bm##pt+>3O*uRh@m+Hj8I'^[:TSAbWC3mB_6]g6m\ERV\:c&6>1M**&A=n_
%!Z+u)Ai48=;^gTWLtd.s:^l%a#7IS@^.L4dNr%+c,^>i*b!jSU;^qB>@`]KgfG;=*LEm^j@5PGbIk%f-1mNAZ6he/Dk>EDt<=*]K
%D<^sN,@uHQ72Z/K"AkrS3G6M377Ht!HMV;Y&qFL)"cOl[4]UIo%h(ro\ijc^]HS[Q@Xucr)q2/M;h)>iN;<X[.Sl<pl7#A>O_)X"
%'B\T$OZ(pTAu_1DO)d'UV31kB/G*H!a3!=QUoGt/->31J4-1JQT[Z.kjm]HBHR0ZT&^j6rp641+@I-oZYqXZ&>`rC#LiAD6VI;oC
%-(,8cTr?LA:(jpmn>gd.8/^8U,#&DX$>4B?+RfKS=[N"e"b&U5BYG4;?tsdPX8'Ar1EVNHF4+qATG7e%c\SC\e"]."fl)-tPZT3b
%0CkO?le$iF;>=7)=f:R^c-V+$^(c[3F==j*%#ESd3$rT08WT-JT.h.h:Xg"sXk8d_`:Iru:%+RC/U!?4+8)ob?i))[Did`g+s'Sk
%%LL&_+/0YnL(pu^\0'8`?Yjmk%fg)&4Mdi<\Fe(1R@E.GpJE\T,C^t*@+*_=gMSI+)qGdaO-.4oETue:X2/1jJ)KoB,i)'W.jU*q
%Am/YXV_/q4Z<Q<cf&1;)_SWup'/$P)//4+GTfSrN0^bN*TKsmk$Ao2)*-ooQk1^AuTa%@<]$OtZ3i!tVJ-sRE^U]%95!X[bN*CkL
%n;+T?G#<Z-$FG5g&r!<I(G0GfS3B<rMB&VQ5#-&d2'RVecIViRmXSh.?Kl!C.lBK;-ERMEm!DuQAWV2"4m.SbN+8HLa<2S*.5Gu)
%B[`LK2KOE28o0=G[H[1XQq^\/Ur=^_KG.cb'2.l%BlXuH=RRV319'!4r7.f'Eb29V2(M/L>lm;IGm#**\sB.G(SGe<(U,pB7F_C)
%CI[#)C'/dH&n!/g$UJM/<R3rEPdF2g,.]:Cb9'a5?nE/ps((-;3A;l6V.fjV2Z>]%%A)"9ioG62*eufrCf8Uj-TX]"l[BTT_K`4$
%6WZ*7?[eR-Gfit0e#<nnUjT%V[jR:q/LqOIPnnYYQ<REp8+AL4d12`AaA4);[9oOb<njOF`4n[.Qi/Y[`GBC*SPJQTo`YO3,q$,S
%WG:6%"D`>XKOO'09..TPBd!:hQBp3$-+';,NE81%8)]YY>ajtWd_SDTZ.;OCFg48*VN_VZR>sP0s!:0QO^-$-Pn>U8a!G/F;1$To
%6#mN(S8T9p$tP_UZ[3E5PhT8\g9Lekn_HlPMBpJj7Y21F=[&`AhT[n":;\Y;*`omNiDJM5E#j=t@@2lfr=I7n[T+bMp*i*4iUV3r
%+e&V.BKpG_Kslq:a\$s(G^VI],VUE;At:ck8C9HqXZ`G'i!9^B4o*S0:m&N:A@$r)4DPGa%]:#:O2"HrO'hG9$JISshTu5#(Mmr/
%NYE)FXun#]8%4*Q-3p67o5hYMVXYW=5ORF>Q63R,(CS2`fonU?"?,&s[LeZ)AM-8955/&o6Yj`I`MB^;&S]1p]^H5#B<Mc*/H^?\
%T_]&=1uC3jLR)b(S9a6"9n:h,6h/OHZJi]WQVuVC<q_RT0pDXlDW@>%IV!)d6@>.eihg?]>&5o^]rT3Tf[PFsO2?I,@=QgqdHB4-
%ZO7%RJoaj!4AEAsMh8?J;G<m[fa:s!,hZMJ;0Ufi=*1m!F?ZPB)>jXuLSL]=@V/jPn^C;"J>!;0C^PRoE!0cM<]bs@`i;l[g"X4Z
%_t)\"H#i-0Xf)Q"9FDIWMX"gEO3bp/@TBK[X!^BB=Ati#MEP$>3nLN[e.(!.RGc8Xg;$qVU;9S/2O.gdG<3K"4hC.l\g#m(b6HL/
%!hhD7ZRCig@Q@p8%Ud?B-B%/Sq%5E6'rf+U+LiOWPo7Hbfq@QUSVRJ:YQKrs(tOmI@OYmm`?B@\GU0fTliQdTao]Q%2W2LmR34=_
%:UamH*R5C>a3[7PPTqZ5R;ZC*J]M?C:P8]&6ZIl%OU/K=_/I#[*lfIY(*U:lc2W=]\R.fH(c<!(O5]oY)0(7cLYe9&NLn?jZu(]B
%#$TNJ(CLAQ\O].U5]Oa-d4-T=1!SWj@sTD62!F`*:Dg%S51=J@T/^d0!d,(4J#+d#6,l:qh*Zm+(D)(aW7SL>5$Fe]-&R:ILk!#,
%KsVd^Ai\td<k3a@6=<"k\Z1F+XG\@36SRS*49nj(PXdp7I<LVePZr6h\9:cmak'(eHSgbY'^Y!mabSoW,`YKq8msMoac-F_N(ng'
%P/'m.JAdXtO^la^;6B5JP-G.@HPD0TcpLt:4Uji_VDduGO2.iKZ=;37^o1L_76ki5`1AE_P9<AaW5%cSUUX%H?'a?P:%G[o)@,(h
%j`Dmdgho.;afPacjcEY^\f0C_eZ/fEO_\um%,\>/$NbTB.PHV?"o#YRL0&'Y!^PV)b'-DJ!doIe\nmA6`Xe[S,\6*m7osjF6m.tf
%qmgQMr=m!40-;C-#QRbr^p[eX,KnY)]D7''T"d7t#V.@E!3:baJl*P^/W$gAJ(=GT$)/<b8iu]Gi--[:U\<#7A0pXXE>tT+6h/U"
%7mt>e3<"@ap>BT!$1Y(]hP=I1c53?iI"G8WHD,PjTDFVqO(=B7?05g!Zr/q'8Z_aa;2c!n2T"Uki]?>OPZLrbI"%l$K;,/Q0]-@Z
%IQZ3rCY+8Y.Ql7+d8C,/D2!@&`9/E<PJ$!sE'tom9KPA?@4Dn>mm,trTQu)O^VE>m5jAMj]q_mJ@^d/(pT#R[>;kP*B6)6r>Z2Qm
%`5a/knt&F`V-EAKI">ZY5j]<6]cb'kGkd"<>O?S\j"qoS"\8<BCp*sT8Re\_/spi=3$&8WZB^HSIkeNA7R''C<"l!Q).e9'"%J@p
%20YN#=I>mb[I[jm.bR&oMD3Hc:&BPk'MFIn#1?B[#XU1s#@[sP`/mBE.D9cAr(pi.f=%Tr".'Y!'H7#W481TR_3@aqKk+>Z%22!Q
%'hmslhbO-Y!jd8YM[VK9Fsuq;j8<$0;Y1'n0GGrV(_e79[(Z/.RM?u'Vqs@P+&h*RSl8Eq_g>Otni;p;LoTfP[>NXC*@[N5r_i^Z
%EWXQ4lQHF-%er&RIm<VH=pI_cQY8Pu)kL^tooH)rFOgF,et.D^[0egdh'lX<,N$<1mu1.:\/0A8!uE,DUR3Ko`M>H3apQSU'F^4F
%0j0\jQ#hsaGVVB%=%K/]rSXBFA;VkP6p6.!TN?m%D1>9=?isi>Y_G$#n.sCu"+J,:7g[YFKJ683V8E^u<+.jtKBb5t2irG1qC&EV
%Mj_oM_*EKMYni+MU]=7nPBY#C4Z"cWRVmh.3aW\WclWkHL1?&)#[r!ZV_^_Raaf#(WJD8AnK&]eIRLCd9?a@dhT*$t0V*&T6T>I%
%:=]R_bSifk`;T;sF]TR-7!A'?U-Aq\5OfX\7p>K*h.+qDf/hiRB'"kdEfY)?KbBc1)M4=\H3q;9FE>olbt,81EIqB;F*+7I!Te@;
%2_m?lkjduS@KA:(29:<"ags5=V-0bG"#V..53\ba4SgL+5am5)lN_S)Q;R=(OR5&((PEJp&h,kk4Q@.JJ00'hWf>BO6/AVD>Z(/k
%N+Vclg7f%5]@mQ77^O>T$_i_U!cW,%RM+.NB0#9o5^dE.\;1p9H_O`_R7_EP3jJc.B]i7@P<pXT^U>\kM^q@jKQ[B(T_1dWele%(
%JQTUBjk>?(84[cGmY%Y.&DL@oAUD/"(@hlGV2E0UApkCUX.So,p:4GqMh)4Qa4]gPZ3ka'+iSde,ZL#i?73j>%d\ljis4S%aYS]N
%QR/\H[?Jq,p:"-T\eNlC=Bef`HkM8*K[ass=]6RF8@^+/W7,H@HB"HAhO^*)27fVT+AQI`6ACsaArgCS."5XtM.04T-&ZS:UGtqe
%3bQu/<&b.7ME-Hu1N@bfpoC&3p-ebE6L0.VHJTpPR$<E*K/$*bo-fHVK1l>`B1ZYG9,6+#p&PH`EsS*4d>L6tS7nnQ&h?fN7$u)W
%JY4hQ[WKNj)_1&rRe'?3gBhB;c&XjQCC^:P[/5)2:Ka%l_1S#X(8pkWm\i9>YDk]#Uui=qUc:QX$L&&T&okG?NeGWQoZ62p"!D3d
%JqaRBQJc#ibi_Z/,`nsbM\K&;@,N1L5+N"IUB/_n:oK8'o!VGS$_RhlgX?5l[*k_afG/2A+JF]^RD61_G7n''(4U>4:YX```olG`
%9a/e][G3/i`L,S^@bNX3oBLM36C??aFn+OHYiQQk"V[+&Y8UUQBU&<Pc8j0L5?),8?!S]:KuQ/!mg:g&BtjoCgQI3cMQ>aL$RRqI
%B8V.#ha47$!HUe/hl>m-`\TZkO&,RLS8]!IC-?>!-QgtL()if*ZmDgEN!IBAW\@W$fO2%ldBVY^@;DS-TrlYebAHj47#W[3-`R(b
%[1$N<EAEN/n4qs%N%?cCqh_in-IWEK81Yh<OF1M0<E+!&%/tBQ*.\t#(_<TmA4]5^B0S9hUT([3fhY<7[,]LQ68b,<UA855T/Pm;
%@Jd]"T-a`/7h<a(gGNei;,5U-IU(KOZCEt:;ZJLY9K27`Su>5bWsKG\V'B2^ooD/k:g;D:X,*dIlnEjFC)fIuo]Ru9nlfYRZ'2WL
%r&PO5^Znj9q@sqX_(R6*OQh3^3Jn_#Z)=a$e"KaHjH.R+[O&4B6YO[3SIq\b"aaZt>C;V`,Et:6*h@&=\[bB"a%<3ZC$iO*=g'2>
%8?Qh`e;=rV<P[[8r0h>b\=NG1B^W['-qsu#7XpZ:A2Xp/B2DjW4gOsQ8DHB5aP0LD?@N@K(r<.^,M81j6HG8b_;tu&.FW:Q*)Egs
%9&pC77`-(FH[]Xc+?rOM9HM\l$9>i)Y&eIA4)0ZH3+[fVO/Cco.8u_p[:E9s_BG$#Uh>%Abm;c&AKh%$@V2QX8,a:iXRe:%ZYtNP
%P4kmgZZ-6fpg]JfZ]s$^11n$b[\BeE"4V5mI[WD[OHGcp=k$q&7r6RHcAs)04k\O>l`KpX!'fpqJS[[OHV>#/T?XaOC6Obl,#]l(
%)Iqb'(1k;(q->@/`"YAN0[3MElVcgf1&@&:<iC&u.[I)+;&Us&qhmHK'dhd\.@$lGL;_d1_$#l)`j^aGqYuQY08oO)M5j?_mcLun
%&hh%HCP^*Gn#7ZN-IYP<H_TA_jK\gaDb"MK=DBO3,e7H/k"EG`qd6A60"g^A[=0?f^XLQ5r9YHNqa(PfJiA-%QsXRkGJ<p-fRBU1
%^[^B7%o;+"ng4HY@<l1hTQeiJKjB#bT\^"&n'(#(^\S<^p,cd]_X%2Qrr"??r1-H/Vjq,(kr/hDQ0S?DM8/TCmf`M,&c[imJ#DtS
%oD^ID!ah0*>j;eOeHn1_q2LqoiNV4]mMAe!KfOXT;/bOQ$Ua\a-,+>Y0?iK=L&">`^@7iRM:93]3o&VUj:8rm_PV[Xgq=<U^*(A-
%Zf^]B\dJu96IpKropn&;>Pcb57=M'^?-#_.*24t6k`(Yq"`NWlE4XDh/p+)M$'4!-?pDQ>r.R(QA!c"cBK*ZZ4/qUBI_1a'DG7W'
%jmJ\/G@C!sWI>XYi.X19UDR=IL_n(jS_EkaJ\3Z_mu5BsoCBcE]G!<_)4q^Ok`rGtjnAXF!5&sKDhPuOdc$1UpcF_K2khuGq?s(n
%_E5IFPV5_m$fCbTN.*-N?Wbl\3qe9:I:IK9e%i^go^`H%S-\8o/\a!dmo8rfV>\8X^CoVbM"L.Hq_(M9n)XEd_uF$ME2a_b'c,R4
%&?_9*n+@+XFUsi8M"`BVHb%+l0&ojCEA-pne:ZPV7W)K))sR;fNPBPuDe/_Q-3)!@5D@bm'nfCHd@X"(.IkHCO0.(gGoi)k/:7Cb
%E1bN=oF'D(I6Z=d[*-eZG>&'$RNmtTRJ#>3rQ[.B<iG:F3S_>H&Ghkg2tL-e4*<sO<CXo'J!'`DeJm>FP-3>.2J:Ro,OejQO?Q0s
%SFuTkhr!_.J,=0an99B^hu"#PJ,bT0oUgU0e,T=.J,/llL;3b\rq$_Nrh'5P:]JI"rqTq#n9=p%YCHD`s8;7[s7B+er,7)][m0nb
%q`fN+LO]-k^])tPs3%%LrTet4kPkbp(O]WZpOE2bs2Y0=%tF?R!RXe+2#~>
%AI9_PrivateDataEnd
